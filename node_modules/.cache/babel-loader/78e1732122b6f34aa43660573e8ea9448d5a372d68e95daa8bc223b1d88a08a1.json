{"ast":null,"code":"import React,{useEffect,useState,useRef}from'react';import'./Map.css';import defaultImage from'../assets/dafault-place.png';// 새로 추가된 기본 이미지 사용\n// InfoWindow 생성 및 오픈을 담당하는 함수 (컴포넌트 내부에서 사용)\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const infoWindowRef={current:null};export async function openInfoWindow(_ref){let{map,marker,lat,lng,address}=_ref;const place=await getPlaceNameFromCoords(lat,lng);const infoWindow=new window.naver.maps.InfoWindow({content:\"\\n      <div style=\\\"padding: 10px; min-width: 200px;\\\">\\n        <p>\\uC704\\uB3C4: \".concat(lat.toFixed(6),\"</p>\\n        <p>\\uACBD\\uB3C4: \").concat(lng.toFixed(6),\"</p>\\n        <p>\\uC7A5\\uC18C: \").concat(place||address,\"</p>\\n      </div>\\n    \"),borderColor:'#ccc',borderWidth:1,anchorSize:new window.naver.maps.Size(10,10)});infoWindow.open(map,marker);infoWindowRef.current=infoWindow;}const searchNaverPlace=async query=>{try{const response=await fetch(\"http://localhost:5001/api/search?query=\".concat(encodeURIComponent(query)));const data=await response.json();console.log(data);// 리턴받은 장소\nreturn data;}catch(err){return null;}};// 클릭한 지역 장소명 검색\nconst getPlaceNameFromCoords=async(lat,lng)=>{try{const response=await fetch(\"http://localhost:5001/api/poi?lat=\".concat(lat,\"&lng=\").concat(lng));const data=await response.json();if(data.documents&&data.documents.length>0){const nearest=getNearestPlace(lat,lng,data.documents);return nearest.place_name;}else{return null;}}catch(err){console.error('장소 이름 가져오기 실패:',err);return null;}};// 가장 가까운 장소 뽑아내기\nconst getNearestPlace=(lat,lng,items)=>{if(!items||items.length===0)return null;return items.sort((a,b)=>a.distance-b.distance)[0];// 가장 가까운 1개\n};// 두 점 사이의 경로 그려주는 함수\nexport async function showRouteBetweenPoints(_ref2){let{startLat,startLng,endLat,endLng,map}=_ref2;const routeData=await fetchNaverRoute(startLat,startLng,endLat,endLng);if(routeData){return drawRouteOnMap(map.current,routeData);}}// pathData 받아오는 함수\nasync function fetchNaverRoute(startLat,startLng,endLat,endLng){const start=\"\".concat(startLng,\",\").concat(startLat);// 경로는 \"lng,lat\" 순서\nconst goal=\"\".concat(endLng,\",\").concat(endLat);try{const response=await fetch(\"http://localhost:5001/api/route?start=\".concat(start,\"&goal=\").concat(goal));const data=await response.json();return data;}catch(err){console.error('경로 API 호출 실패:',err);return null;}}// pathData로 맵에 경로 그리는 함수\nfunction drawRouteOnMap(map,pathData){var _pathData$route,_pathData$route$traop,_pathData$route$traop2;if(!(pathData!==null&&pathData!==void 0&&(_pathData$route=pathData.route)!==null&&_pathData$route!==void 0&&(_pathData$route$traop=_pathData$route.traoptimal)!==null&&_pathData$route$traop!==void 0&&(_pathData$route$traop2=_pathData$route$traop[0])!==null&&_pathData$route$traop2!==void 0&&_pathData$route$traop2.path)){console.log('경로 데이터가 올바르지 않습니다.');return;}const rawPath=pathData.route.traoptimal[0].path;const convertedPath=rawPath.map(_ref3=>{let[lng,lat]=_ref3;return new window.naver.maps.LatLng(lat,lng);});const polyline=new window.naver.maps.Polyline({map:map,path:convertedPath,strokeColor:'#007BFF',strokeWeight:5});const arrowMarkers=addArrowMarkers(convertedPath,map);return[polyline,arrowMarkers];}// 경로에서 방향 나타내는 화살표 그려주는 함수\nfunction addArrowMarkers(path,map){let markers=[];const interval=10;for(let i=interval;i<path.length;i+=interval){const prev=path[i-1];const curr=path[i];const dx=curr.lng()-prev.lng();const dy=curr.lat()-prev.lat();const angle=Math.atan2(dx,dy)*180/Math.PI-90;const midLat=(prev.lat()+curr.lat())/2;const midLng=(prev.lng()+curr.lng())/2;const newMarker=new window.naver.maps.Marker({position:new window.naver.maps.LatLng(midLat,midLng),map,icon:{content:\"<div style=\\\"\\n          transform: rotate(\".concat(angle,\"deg);\\n          font-size: 20px;\\n          color: red;\\n        \\\">\\u27A4</div>\"),anchor:new window.naver.maps.Point(8,8)}});markers.push(newMarker);}return markers;}// 중복 제거: 기존 마커 제거\nexport function removeCurrentMarker(markerRef){if(markerRef.current){markerRef.current.setMap(null);}}// 중복 제거: 새 마커 생성 및 등록\nfunction createAndRegisterMarker(position,mapRef,markerRef){const marker=new window.naver.maps.Marker({position,map:mapRef.current});markerRef.current=marker;return marker;}// 중복 제거: 마커 정보 상태 업데이트\nfunction updateMarkerInfo(setMarkerInfo,lat,lng,address){setMarkerInfo({lat,lng,address});}export function getAddress(address){return address.roadAddress||address.jibunAddress;}function Map(){// 상태 관리\nconst[markerInfo,setMarkerInfo]=useState(null);const[showInput,setShowInput]=useState(false);const[placeName,setPlaceName]=useState('');const[placeDescription,setPlaceDescription]=useState('');// 장소 설명 추가\nconst[placeType,setPlaceType]=useState('Landmark');// 장소 유형\nconst[stayTime,setStayTime]=useState('1h');// 체류 시간\nconst[uploadedImage,setUploadedImage]=useState(null);// 업로드된 이미지\nconst[imagePreview,setImagePreview]=useState('');// 이미지 미리보기 URL\nconst[mapLoaded,setMapLoaded]=useState(false);const[customAddress,setCustomAddress]=useState('');// 사용자가 직접 입력한 주소\nconst[originalAddress,setOriginalAddress]=useState('');// 네이버 API에서 받아온 원본 주소\nconst[searchQuery,setSearchQuery]=useState('');// 장소 검색어 추가\nconst mapRef=useRef(null);const markerRef=useRef(null);const fileInputRef=useRef(null);// 장소명으로 검색\nconst searchLocationByQuery=async()=>{if(!searchQuery.trim()||!mapRef.current)return;try{// 장소 검색\nconst data=await searchNaverPlace(searchQuery.trim());if(!data||data.length===0){alert('검색 결과가 없습니다.');return;}console.log(data[0]);const place=data[0];const lat=place.lat;const lng=place.lng;const position=new window.naver.maps.LatLng(lat,lng);setPlaceName(place.name);const finalAddress=place.address;setCustomAddress(finalAddress);setOriginalAddress(finalAddress);// 지도 이동\nmapRef.current.setCenter(position);// 기존 마커 제거\nremoveCurrentMarker(markerRef);// 새 마커 생성 및 등록\nconst marker=createAndRegisterMarker(position,mapRef,markerRef);// 정보창 표시\nawait openInfoWindow({map:mapRef.current,marker,lat:lat,lng:lng,address:searchQuery.trim()});// 마커 정보 업데이트\nupdateMarkerInfo(setMarkerInfo,lat,lng,searchQuery.trim());setShowInput(true);}catch(error){console.error('장소 검색 실패:',error);alert('장소 검색 중 문제가 발생했습니다.');}};// 주소로 마커 위치 업데이트\nconst searchAddressAndUpdateMarker=()=>{if(!customAddress.trim()||!mapRef.current)return;// 지오코딩 서비스를 사용하여 주소를 좌표로 변환\nwindow.naver.maps.Service.geocode({query:customAddress},async(status,response)=>{if(status!==window.naver.maps.Service.Status.OK){alert('입력하신 주소를 찾을 수 없습니다. 다른 주소를 입력해주세요.');return;}// 검색 결과가 없는 경우\nif(response.v2.meta.totalCount===0){alert('검색 결과가 없습니다. 다른 주소를 입력해주세요.');return;}// 처음 검색된 주소 정보 가져오기\nconst firstItem=response.v2.addresses[0];const position=new window.naver.maps.LatLng(firstItem.y,firstItem.x);// 지도 이동\nmapRef.current.setCenter(position);// 기존 마커 제거 (함수로 분리)\nremoveCurrentMarker(markerRef);// 새 마커 생성 및 등록 (함수로 분리)\nconst marker=createAndRegisterMarker(position,mapRef,markerRef);const fullAddress=getAddress(firstItem);// 정보창 표시 (함수로 분리)\nawait openInfoWindow({map:mapRef.current,marker,lat:position.lat(),lng:position.lng(),address:fullAddress});// 마커 정보 상태 업데이트 (함수로 분리)\nupdateMarkerInfo(setMarkerInfo,position.lat(),position.lng(),fullAddress);// 이미 주소가 입력되어 있으니 customAddress는 업데이트하지 않음\n});};// 주소 입력 후 일정 시간이 지나면 자동으로 검색하는 기능 (선택적)\n// 현재는 사용자가 검색 버튼을 클릭하거나 Enter 키를 누르는 경우에만 검색되도록 설정\n// 이미지 선택 핸들러\nconst handleImageUpload=e=>{const file=e.target.files[0];if(file){// 파일 크기 검사 (최대 5MB로 제한)\nif(file.size>5*1024*1024){alert('이미지 크기는 5MB 이하여야 합니다.');return;}// 파일 타입 검사\nif(!file.type.match('image.*')){alert('이미지 파일만 업로드 가능합니다.');return;}// 이미지를 Base64로 인코딩\nconst reader=new FileReader();reader.onload=event=>{setUploadedImage(event.target.result);// Base64 문자열 저장\nsetImagePreview(event.target.result);// 미리보기용 URL 설정\n};reader.readAsDataURL(file);}};// 이미지 업로드 버튼 클릭 핸들러\nconst triggerFileInput=()=>{fileInputRef.current.click();};// 주소에서 지역 추출 (예: \"서울특별시 광진구...\" -> \"서울\")\nconst extractLocation=address=>{if(!address)return'';// 시/도 추출 (서울특별시, 경기도 등)\nconst cityMatch=address.match(/([^\\s]+시|[^\\s]+도|[^\\s]+군|[^\\s]+구)/);if(cityMatch){// \"특별시\", \"광역시\" 등의 접미사 제거\nreturn cityMatch[0].replace(/특별시|광역시|자치시/,'').trim();}return'';};// 주소 입력 필드에서 Enter 키 입력 시 주소 검색 실행\nconst handleAddressKeyPress=e=>{if(e.key==='Enter'){e.preventDefault();searchAddressAndUpdateMarker();}};// 장소명 검색 필드에서 Enter 키 입력 시 장소 검색 실행\nconst handleSearchKeyPress=e=>{if(e.key==='Enter'){e.preventDefault();searchLocationByQuery();}};// 장소를 localStorage에 저장\nconst saveMarkerToLocalStorage=()=>{if(!markerInfo)return;// 필수 입력 확인\nconst name=placeName.trim();if(!name){alert('장소 이름을 입력해주세요.');return;}// 네이버 API에서 받아온 원본 주소를 우선적으로 사용\n// 원본 주소가 없는 경우에만 사용자가 입력한 주소 사용\nconst finalAddress=originalAddress.trim()||markerInfo.address;// 장소 위치 (시/도) 추출\nconst location=extractLocation(finalAddress);// 현재 시간을 ID로 사용\nconst id=new Date().getTime();const markerObj={id:id,name:name,description:placeDescription,// 장소 설명 추가\naddress:finalAddress,lat:markerInfo.lat,lng:markerInfo.lng,img:uploadedImage||defaultImage,// 업로드된 이미지 또는 기본 이미지\nlocation:location,// 추출한 위치 (서울, 부산 등)\ntype:placeType,// 장소 유형\nstay:stayTime,// 체류 시간\npopular:false,// 기본값으로 인기 장소 아님\nsavedDate:new Date().toISOString(),// 저장 날짜\nfavorite:false};// localStorage에 기존 데이터 불러오기\nlet markers=JSON.parse(localStorage.getItem(\"markers\"))||[];markers.push(markerObj);// localStorage에 저장\nlocalStorage.setItem(\"markers\",JSON.stringify(markers));// 저장 완료 알림 및 상태 초기화\nalert('위치가 저장되었습니다! Saved 메뉴에서 확인하세요.');setPlaceName('');setPlaceDescription('');setPlaceType('Landmark');setStayTime('1h');setUploadedImage(null);setImagePreview('');setSearchQuery('');setCustomAddress('');setOriginalAddress('');setShowInput(false);};// 마운트 후 네이버 지도 API 확인\nuseEffect(()=>{const checkNaverMapsLoaded=()=>{// window.naver 객체가 존재하는지 먼저 확인\nif(window.naver&&window.naver.maps){console.log('네이버 지도 API가 성공적으로 로드되었습니다!');setMapLoaded(true);// 지도 API 로드 완료 표시\n}else{console.error('네이버 지도 API를 찾을 수 없습니다. window.naver:',window.naver);// 0.5초 후 다시 시도\nsetTimeout(checkNaverMapsLoaded,500);}};// 초기 시도\ncheckNaverMapsLoaded();// 컴포넌트 언마운트 시 정리\nreturn()=>{if(markerRef.current){markerRef.current.setMap(null);}};},[]);// 네이버 지도 초기화\nuseEffect(()=>{// 지도 API가 로드되지 않은 경우 종료\nif(!mapLoaded)return;console.log('지도 초기화 시작...');try{// 1. 지도 요소 가져오기\nconst mapElement=document.getElementById('map');if(!mapElement){console.error('지도를 표시할 DOM 요소를 찾을 수 없습니다.');return;}// 2. 기본 위치 설정 (세종대)\nconst defaultPosition=new window.naver.maps.LatLng(37.549186395087,127.07505567644);// 3. 지도 옵션 설정\nconst mapOptions={center:defaultPosition,zoom:17,zoomControl:true,zoomControlOptions:{position:window.naver.maps.Position.TOP_RIGHT},mapTypeId:window.naver.maps.MapTypeId.NORMAL,mapTypeControl:true};// 4. 지도 객체 생성\nconsole.log('지도 객체 생성 중...');const map=new window.naver.maps.Map(mapElement,mapOptions);mapRef.current=map;console.log('지도 객체 생성 완료!');// 5. 현재 위치 가져오기\nif(navigator.geolocation){navigator.geolocation.getCurrentPosition(position=>{const{latitude,longitude}=position.coords;const currentPosition=new window.naver.maps.LatLng(latitude,longitude);// 현재 위치로 지도 이동\nmap.setCenter(currentPosition);// 현재 위치에 마커 표시\nnew window.naver.maps.Marker({position:currentPosition,map:map,icon:{content:'<div style=\"width: 16px; height: 16px; background-color: blue; border-radius: 50%; border: 2px solid white;\"></div>',anchor:new window.naver.maps.Point(8,8)}});console.log('현재 위치로 지도 이동:',latitude,longitude);},error=>{console.warn('현재 위치를 가져올 수 없습니다:',error);});}// 6. 지도 클릭 이벤트 리스너 등록\nwindow.naver.maps.Event.addListener(map,'click',function(e){// 클릭한 위치 좌표\nconst clickedPosition=e.coord;// 기존 마커 제거\nremoveCurrentMarker(markerRef);// 새 마커 생성\n// const marker = createAndRegisterMarker(clickedPosition, map, markerRef)\nconst marker=new window.naver.maps.Marker({position:clickedPosition,map:map});markerRef.current=marker;// 클릭 위치의 주소 정보 가져오기 (Reverse Geocoding)\nwindow.naver.maps.Service.reverseGeocode({coords:clickedPosition,orders:[window.naver.maps.Service.OrderType.ADDR,window.naver.maps.Service.OrderType.ROAD_ADDR].join(',')},async function(status,response){if(status!==window.naver.maps.Service.Status.OK){console.error('주소 정보를 가져오는데 실패했습니다');return;}// 주소 정보 추출\nconst address=getAddress(response.v2.address);// 정보창 표시 (함수로 분리)\nawait openInfoWindow({map,marker,lat:clickedPosition.lat(),lng:clickedPosition.lng(),address});// 마커 정보 업데이트\nconst markerData={lat:clickedPosition.lat(),lng:clickedPosition.lng(),address:address};setMarkerInfo(markerData);setCustomAddress(address);// 초기 주소를 사용자 입력용 상태에 설정\nsetShowInput(true);});});console.log('지도 초기화 완료!');}catch(error){console.error('지도 초기화 중 오류 발생:',error);}},[mapLoaded]);// mapLoaded 상태가 변경될 때만 실행\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"map-page\",children:[!mapLoaded&&/*#__PURE__*/_jsx(\"div\",{className:\"loading-message\",style:{textAlign:'center',padding:'20px'},children:/*#__PURE__*/_jsx(\"p\",{children:\"\\uB124\\uC774\\uBC84 \\uC9C0\\uB3C4 API\\uB97C \\uB85C\\uB529\\uC911\\uC785\\uB2C8\\uB2E4...\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"search-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"search-box\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"search-input\",placeholder:\"\\uC7A5\\uC18C\\uB97C \\uAC80\\uC0C9\\uD558\\uC138\\uC694\",value:searchQuery,onChange:e=>setSearchQuery(e.target.value),onKeyPress:handleSearchKeyPress}),/*#__PURE__*/_jsx(\"button\",{className:\"search-button\",onClick:searchLocationByQuery,children:\"\\uAC80\\uC0C9\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"map-container\",children:/*#__PURE__*/_jsx(\"div\",{id:\"map\",style:{width:'100%',height:'600px',border:'1px solid #ddd'}})}),showInput&&markerInfo&&/*#__PURE__*/_jsxs(\"div\",{className:\"marker-info\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uC120\\uD0DD\\uD55C \\uC704\\uCE58 \\uC815\\uBCF4\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"address\",children:/*#__PURE__*/_jsx(\"strong\",{children:\"\\uC8FC\\uC18C:\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"address-input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"address\",value:customAddress,onChange:e=>setCustomAddress(e.target.value),onKeyPress:handleAddressKeyPress,placeholder:\"\\uC8FC\\uC18C\\uB97C \\uC785\\uB825\\uD558\\uACE0 Enter \\uD0A4\\uB098 \\uAC80\\uC0C9 \\uBC84\\uD2BC \\uD074\\uB9AD\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"search-address-btn\",onClick:searchAddressAndUpdateMarker,title:\"\\uC8FC\\uC18C\\uB85C \\uAC80\\uC0C9\",children:\"\\uD83D\\uDD0D\"})]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\uC704\\uB3C4:\"}),\" \",markerInfo.lat.toFixed(6),\", \",/*#__PURE__*/_jsx(\"strong\",{children:\"\\uACBD\\uB3C4:\"}),\" \",markerInfo.lng.toFixed(6)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"image-upload-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"image-preview-container\",onClick:triggerFileInput,children:imagePreview?/*#__PURE__*/_jsx(\"img\",{src:imagePreview,alt:\"\\uC7A5\\uC18C \\uC774\\uBBF8\\uC9C0 \\uBBF8\\uB9AC\\uBCF4\\uAE30\",className:\"image-preview\"}):/*#__PURE__*/_jsxs(\"div\",{className:\"upload-placeholder\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"\\u2795\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uC0AC\\uC9C4 \\uCD94\\uAC00\"})]})}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\"image/*\",onChange:handleImageUpload,ref:fileInputRef,style:{display:'none'}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"placeName\",children:\"\\uC7A5\\uC18C \\uC774\\uB984:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"placeName\",value:placeName,onChange:e=>setPlaceName(e.target.value),placeholder:\"\\uC7A5\\uC18C \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"placeDescription\",children:\"\\uC7A5\\uC18C \\uC124\\uBA85:\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"placeDescription\",value:placeDescription,onChange:e=>setPlaceDescription(e.target.value),placeholder:\"\\uC7A5\\uC18C\\uC5D0 \\uB300\\uD55C \\uC124\\uBA85\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",rows:\"3\",className:\"description-textarea\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"placeType\",children:\"\\uC7A5\\uC18C \\uC720\\uD615:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"placeType\",value:placeType,onChange:e=>setPlaceType(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"Landmark\",children:\"\\uB79C\\uB4DC\\uB9C8\\uD06C\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Restaurant\",children:\"\\uC2DD\\uB2F9\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Cafe\",children:\"\\uCE74\\uD398\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Shopping\",children:\"\\uC1FC\\uD551\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Culture\",children:\"\\uBB38\\uD654/\\uC608\\uC220\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Nature\",children:\"\\uC790\\uC5F0/\\uACF5\\uC6D0\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Entertainment\",children:\"\\uC5D4\\uD130\\uD14C\\uC778\\uBA3C\\uD2B8\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Accommodation\",children:\"\\uC219\\uBC15\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"stayTime\",children:\"\\uCCB4\\uB958 \\uC2DC\\uAC04:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"stayTime\",value:stayTime,onChange:e=>setStayTime(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"0.5h\",children:\"30\\uBD84\"}),/*#__PURE__*/_jsx(\"option\",{value:\"1h\",children:\"1\\uC2DC\\uAC04\"}),/*#__PURE__*/_jsx(\"option\",{value:\"1.5h\",children:\"1\\uC2DC\\uAC04 30\\uBD84\"}),/*#__PURE__*/_jsx(\"option\",{value:\"2h\",children:\"2\\uC2DC\\uAC04\"}),/*#__PURE__*/_jsx(\"option\",{value:\"2\\u20133h\",children:\"2-3\\uC2DC\\uAC04\"}),/*#__PURE__*/_jsx(\"option\",{value:\"3\\u20134h\",children:\"3-4\\uC2DC\\uAC04\"}),/*#__PURE__*/_jsx(\"option\",{value:\"4h+\",children:\"4\\uC2DC\\uAC04 \\uC774\\uC0C1\"})]})]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:saveMarkerToLocalStorage,className:\"save-button\",children:\"\\uC774 \\uC704\\uCE58 \\uC800\\uC7A5\\uD558\\uAE30\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"map-guide\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"guide-text\",children:\"\\uC704\\uCE58\\uB97C \\uC800\\uC7A5\\uD558\\uB824\\uBA74 \\uC9C0\\uB3C4\\uC5D0\\uC11C \\uC6D0\\uD558\\uB294 \\uC704\\uCE58\\uB97C \\uD074\\uB9AD\\uD558\\uC138\\uC694.\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"guide-text\",children:[\"\\uC800\\uC7A5\\uD55C \\uC704\\uCE58\\uB294 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Saved\"}),\" \\uBA54\\uB274\\uC5D0\\uC11C \\uD655\\uC778\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"]})]})]});}export default Map;","map":{"version":3,"names":["React","useEffect","useState","useRef","defaultImage","jsx","_jsx","jsxs","_jsxs","infoWindowRef","current","openInfoWindow","_ref","map","marker","lat","lng","address","place","getPlaceNameFromCoords","infoWindow","window","naver","maps","InfoWindow","content","concat","toFixed","borderColor","borderWidth","anchorSize","Size","open","searchNaverPlace","query","response","fetch","encodeURIComponent","data","json","console","log","err","documents","length","nearest","getNearestPlace","place_name","error","items","sort","a","b","distance","showRouteBetweenPoints","_ref2","startLat","startLng","endLat","endLng","routeData","fetchNaverRoute","drawRouteOnMap","start","goal","pathData","_pathData$route","_pathData$route$traop","_pathData$route$traop2","route","traoptimal","path","rawPath","convertedPath","_ref3","LatLng","polyline","Polyline","strokeColor","strokeWeight","arrowMarkers","addArrowMarkers","markers","interval","i","prev","curr","dx","dy","angle","Math","atan2","PI","midLat","midLng","newMarker","Marker","position","icon","anchor","Point","push","removeCurrentMarker","markerRef","setMap","createAndRegisterMarker","mapRef","updateMarkerInfo","setMarkerInfo","getAddress","roadAddress","jibunAddress","Map","markerInfo","showInput","setShowInput","placeName","setPlaceName","placeDescription","setPlaceDescription","placeType","setPlaceType","stayTime","setStayTime","uploadedImage","setUploadedImage","imagePreview","setImagePreview","mapLoaded","setMapLoaded","customAddress","setCustomAddress","originalAddress","setOriginalAddress","searchQuery","setSearchQuery","fileInputRef","searchLocationByQuery","trim","alert","name","finalAddress","setCenter","searchAddressAndUpdateMarker","Service","geocode","status","Status","OK","v2","meta","totalCount","firstItem","addresses","y","x","fullAddress","handleImageUpload","e","file","target","files","size","type","match","reader","FileReader","onload","event","result","readAsDataURL","triggerFileInput","click","extractLocation","cityMatch","replace","handleAddressKeyPress","key","preventDefault","handleSearchKeyPress","saveMarkerToLocalStorage","location","id","Date","getTime","markerObj","description","img","stay","popular","savedDate","toISOString","favorite","JSON","parse","localStorage","getItem","setItem","stringify","checkNaverMapsLoaded","setTimeout","mapElement","document","getElementById","defaultPosition","mapOptions","center","zoom","zoomControl","zoomControlOptions","Position","TOP_RIGHT","mapTypeId","MapTypeId","NORMAL","mapTypeControl","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","currentPosition","warn","Event","addListener","clickedPosition","coord","reverseGeocode","orders","OrderType","ADDR","ROAD_ADDR","join","markerData","className","children","style","textAlign","padding","placeholder","value","onChange","onKeyPress","onClick","width","height","border","htmlFor","title","src","alt","accept","ref","display","rows"],"sources":["C:/Users/username/Desktop/newweb/src/pages/Map.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './Map.css';\nimport defaultImage from '../assets/dafault-place.png'; // 새로 추가된 기본 이미지 사용\n\n// InfoWindow 생성 및 오픈을 담당하는 함수 (컴포넌트 내부에서 사용)\nexport const infoWindowRef = { current: null };\n\nexport async function openInfoWindow({ map, marker, lat, lng, address }) {\n  const place = await getPlaceNameFromCoords(lat, lng);\n  const infoWindow = new window.naver.maps.InfoWindow({\n    content: `\n      <div style=\"padding: 10px; min-width: 200px;\">\n        <p>위도: ${lat.toFixed(6)}</p>\n        <p>경도: ${lng.toFixed(6)}</p>\n        <p>장소: ${(place || address)}</p>\n      </div>\n    `,\n    borderColor: '#ccc',\n    borderWidth: 1,\n    anchorSize: new window.naver.maps.Size(10, 10)\n  });\n  infoWindow.open(map, marker);\n  infoWindowRef.current = infoWindow;\n}\n\nconst searchNaverPlace = async (query) => {\n  try {\n    const response = await fetch(`http://localhost:5001/api/search?query=${encodeURIComponent(query)}`);\n    const data = await response.json();\n    console.log(data); // 리턴받은 장소\n    return data;\n  } catch(err) {\n    return null;\n  }\n};\n\n// 클릭한 지역 장소명 검색\nconst getPlaceNameFromCoords = async (lat, lng) => {\n  try {\n    const response = await fetch(`http://localhost:5001/api/poi?lat=${lat}&lng=${lng}`);\n    const data = await response.json();\n    if (data.documents && data.documents.length > 0) {\n      const nearest = getNearestPlace(lat, lng, data.documents);\n      return nearest.place_name;\n    } else {\n      return null;\n    }\n  } catch (err) {\n    console.error('장소 이름 가져오기 실패:', err);\n    return null;\n  }\n};\n\n// 가장 가까운 장소 뽑아내기\nconst getNearestPlace = (lat, lng, items) => {\n  if (!items || items.length === 0) return null;\n  return items.sort((a, b) => a.distance - b.distance)[0]; // 가장 가까운 1개\n};\n\n// 두 점 사이의 경로 그려주는 함수\nexport async function showRouteBetweenPoints({ startLat, startLng, endLat, endLng, map }) {\n  const routeData = await fetchNaverRoute(startLat, startLng, endLat, endLng);\n  if (routeData) {\n    return drawRouteOnMap(map.current, routeData);\n  }\n}\n\n// pathData 받아오는 함수\nasync function fetchNaverRoute(startLat, startLng, endLat, endLng) {\n  const start = `${startLng},${startLat}`;  // 경로는 \"lng,lat\" 순서\n  const goal = `${endLng},${endLat}`;\n\n  try {\n    const response = await fetch(`http://localhost:5001/api/route?start=${start}&goal=${goal}`);\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('경로 API 호출 실패:', err);\n    return null;\n  }\n}\n\n// pathData로 맵에 경로 그리는 함수\nfunction drawRouteOnMap(map, pathData) {\n  if (!pathData?.route?.traoptimal?.[0]?.path) {\n    console.log('경로 데이터가 올바르지 않습니다.');\n    return;\n  }\n\n  const rawPath = pathData.route.traoptimal[0].path;\n  const convertedPath = rawPath.map(([lng, lat]) => new window.naver.maps.LatLng(lat, lng));\n\n  const polyline = new window.naver.maps.Polyline({\n    map: map,\n    path: convertedPath,\n    strokeColor: '#007BFF',\n    strokeWeight: 5\n  });\n  const arrowMarkers = addArrowMarkers(convertedPath, map);\n  return [polyline, arrowMarkers];\n}\n\n// 경로에서 방향 나타내는 화살표 그려주는 함수\nfunction addArrowMarkers(path, map) {\n  let markers = [];\n  const interval = 10;\n  for (let i = interval; i < path.length; i+=interval) {\n    const prev = path[i-1];\n    const curr = path[i];\n  \n    const dx = curr.lng() - prev.lng();\n    const dy = curr.lat() - prev.lat();\n    const angle = Math.atan2(dx, dy) * 180 / Math.PI - 90;\n  \n    const midLat = (prev.lat() + curr.lat()) / 2;\n    const midLng = (prev.lng() + curr.lng()) / 2;\n  \n    const newMarker = new window.naver.maps.Marker({\n      position: new window.naver.maps.LatLng(midLat, midLng),\n      map,\n      icon: {\n        content: `<div style=\"\n          transform: rotate(${angle}deg);\n          font-size: 20px;\n          color: red;\n        \">➤</div>`,\n        anchor: new window.naver.maps.Point(8, 8)\n      }\n    });\n    markers.push(newMarker)\n  }\n  return markers;\n}\n\n// 중복 제거: 기존 마커 제거\nexport function removeCurrentMarker(markerRef) {\n  if (markerRef.current) {\n    markerRef.current.setMap(null);\n  }\n}\n\n// 중복 제거: 새 마커 생성 및 등록\nfunction createAndRegisterMarker(position, mapRef, markerRef) {\n  const marker = new window.naver.maps.Marker({\n    position,\n    map: mapRef.current\n  });\n  markerRef.current = marker;\n  return marker;\n}\n\n// 중복 제거: 마커 정보 상태 업데이트\nfunction updateMarkerInfo(setMarkerInfo, lat, lng, address) {\n  setMarkerInfo({ lat, lng, address });\n}\n\nexport function getAddress(address) {\n  return address.roadAddress || address.jibunAddress;\n}\n\nfunction Map() {\n  // 상태 관리\n  const [markerInfo, setMarkerInfo] = useState(null);\n  const [showInput, setShowInput] = useState(false);\n  const [placeName, setPlaceName] = useState('');\n  const [placeDescription, setPlaceDescription] = useState(''); // 장소 설명 추가\n  const [placeType, setPlaceType] = useState('Landmark'); // 장소 유형\n  const [stayTime, setStayTime] = useState('1h'); // 체류 시간\n  const [uploadedImage, setUploadedImage] = useState(null); // 업로드된 이미지\n  const [imagePreview, setImagePreview] = useState(''); // 이미지 미리보기 URL\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [customAddress, setCustomAddress] = useState(''); // 사용자가 직접 입력한 주소\n  const [originalAddress, setOriginalAddress] = useState(''); // 네이버 API에서 받아온 원본 주소\n  const [searchQuery, setSearchQuery] = useState(''); // 장소 검색어 추가\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const fileInputRef = useRef(null);\n\n  // 장소명으로 검색\n  const searchLocationByQuery = async () => {\n    if (!searchQuery.trim() || !mapRef.current) return;\n\n    try {\n      // 장소 검색\n      const data = await searchNaverPlace(searchQuery.trim());\n\n      if (!data || data.length === 0) {\n        alert('검색 결과가 없습니다.');\n        return;\n      }\n      console.log(data[0]);\n\n      const place = data[0];\n      const lat = place.lat\n      const lng = place.lng\n      const position = new window.naver.maps.LatLng(lat, lng);\n\n      setPlaceName(place.name);\n\n      const finalAddress = place.address\n      setCustomAddress(finalAddress);\n      setOriginalAddress(finalAddress);\n\n      // 지도 이동\n      mapRef.current.setCenter(position);\n\n      // 기존 마커 제거\n      removeCurrentMarker(markerRef);\n\n      // 새 마커 생성 및 등록\n      const marker = createAndRegisterMarker(position, mapRef, markerRef);\n\n      // 정보창 표시\n      await openInfoWindow({\n        map: mapRef.current,\n        marker,\n        lat: lat,\n        lng: lng,\n        address: searchQuery.trim()\n      });\n\n      // 마커 정보 업데이트\n      updateMarkerInfo(setMarkerInfo, lat, lng, searchQuery.trim());\n      setShowInput(true);\n    } catch (error) {\n      console.error('장소 검색 실패:', error);\n      alert('장소 검색 중 문제가 발생했습니다.');\n    }\n  };\n\n  // 주소로 마커 위치 업데이트\n  const searchAddressAndUpdateMarker = () => {\n    if (!customAddress.trim() || !mapRef.current) return;\n\n    // 지오코딩 서비스를 사용하여 주소를 좌표로 변환\n    window.naver.maps.Service.geocode({\n      query: customAddress\n    }, async (status, response) => {\n      if (status !== window.naver.maps.Service.Status.OK) {\n        alert('입력하신 주소를 찾을 수 없습니다. 다른 주소를 입력해주세요.');\n        return;\n      }\n\n      // 검색 결과가 없는 경우\n      if (response.v2.meta.totalCount === 0) {\n        alert('검색 결과가 없습니다. 다른 주소를 입력해주세요.');\n        return;\n      }\n\n      // 처음 검색된 주소 정보 가져오기\n      const firstItem = response.v2.addresses[0];\n      const position = new window.naver.maps.LatLng(firstItem.y, firstItem.x);\n      \n      // 지도 이동\n      mapRef.current.setCenter(position);\n      \n      // 기존 마커 제거 (함수로 분리)\n      removeCurrentMarker(markerRef);\n\n      // 새 마커 생성 및 등록 (함수로 분리)\n      const marker = createAndRegisterMarker(position, mapRef, markerRef);\n\n      const fullAddress = getAddress(firstItem)\n\n      // 정보창 표시 (함수로 분리)\n      await openInfoWindow({\n        map: mapRef.current,\n        marker,\n        lat: position.lat(),\n        lng: position.lng(),\n        address: fullAddress\n      });\n\n      // 마커 정보 상태 업데이트 (함수로 분리)\n      updateMarkerInfo(setMarkerInfo, position.lat(), position.lng(), fullAddress);\n      \n      // 이미 주소가 입력되어 있으니 customAddress는 업데이트하지 않음\n    });\n  };\n\n  // 주소 입력 후 일정 시간이 지나면 자동으로 검색하는 기능 (선택적)\n  // 현재는 사용자가 검색 버튼을 클릭하거나 Enter 키를 누르는 경우에만 검색되도록 설정\n\n  // 이미지 선택 핸들러\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      // 파일 크기 검사 (최대 5MB로 제한)\n      if (file.size > 5 * 1024 * 1024) {\n        alert('이미지 크기는 5MB 이하여야 합니다.');\n        return;\n      }\n\n      // 파일 타입 검사\n      if (!file.type.match('image.*')) {\n        alert('이미지 파일만 업로드 가능합니다.');\n        return;\n      }\n\n      // 이미지를 Base64로 인코딩\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setUploadedImage(event.target.result); // Base64 문자열 저장\n        setImagePreview(event.target.result); // 미리보기용 URL 설정\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // 이미지 업로드 버튼 클릭 핸들러\n  const triggerFileInput = () => {\n    fileInputRef.current.click();\n  };\n\n  // 주소에서 지역 추출 (예: \"서울특별시 광진구...\" -> \"서울\")\n  const extractLocation = (address) => {\n    if (!address) return '';\n    \n    // 시/도 추출 (서울특별시, 경기도 등)\n    const cityMatch = address.match(/([^\\s]+시|[^\\s]+도|[^\\s]+군|[^\\s]+구)/);\n    if (cityMatch) {\n      // \"특별시\", \"광역시\" 등의 접미사 제거\n      return cityMatch[0].replace(/특별시|광역시|자치시/, '').trim();\n    }\n    return '';\n  };\n  \n  // 주소 입력 필드에서 Enter 키 입력 시 주소 검색 실행\n  const handleAddressKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      searchAddressAndUpdateMarker();\n    }\n  };\n  \n  // 장소명 검색 필드에서 Enter 키 입력 시 장소 검색 실행\n  const handleSearchKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      searchLocationByQuery();\n    }\n  };\n\n  // 장소를 localStorage에 저장\n  const saveMarkerToLocalStorage = () => {\n    if (!markerInfo) return;\n    \n    // 필수 입력 확인\n    const name = placeName.trim();\n    if (!name) {\n      alert('장소 이름을 입력해주세요.');\n      return;\n    }\n    \n    // 네이버 API에서 받아온 원본 주소를 우선적으로 사용\n    // 원본 주소가 없는 경우에만 사용자가 입력한 주소 사용\n    const finalAddress = originalAddress.trim() || markerInfo.address;\n    \n    // 장소 위치 (시/도) 추출\n    const location = extractLocation(finalAddress);\n    \n    // 현재 시간을 ID로 사용\n    const id = new Date().getTime();\n    \n    const markerObj = {\n      id: id,\n      name: name,\n      description: placeDescription, // 장소 설명 추가\n      address: finalAddress,\n      lat: markerInfo.lat,\n      lng: markerInfo.lng,\n      img: uploadedImage || defaultImage, // 업로드된 이미지 또는 기본 이미지\n      location: location, // 추출한 위치 (서울, 부산 등)\n      type: placeType, // 장소 유형\n      stay: stayTime, // 체류 시간\n      popular: false, // 기본값으로 인기 장소 아님\n      savedDate: new Date().toISOString(), // 저장 날짜\n      favorite: false,\n    };\n\n    // localStorage에 기존 데이터 불러오기\n    let markers = JSON.parse(localStorage.getItem(\"markers\")) || [];\n    markers.push(markerObj);\n\n    // localStorage에 저장\n    localStorage.setItem(\"markers\", JSON.stringify(markers));\n\n    // 저장 완료 알림 및 상태 초기화\n    alert('위치가 저장되었습니다! Saved 메뉴에서 확인하세요.');\n    setPlaceName('');\n    setPlaceDescription('');\n    setPlaceType('Landmark');\n    setStayTime('1h');\n    setUploadedImage(null);\n    setImagePreview('');\n    setSearchQuery('');\n    setCustomAddress('');\n    setOriginalAddress('');\n    setShowInput(false);\n  };\n\n  // 마운트 후 네이버 지도 API 확인\n  useEffect(() => {\n    const checkNaverMapsLoaded = () => {\n      // window.naver 객체가 존재하는지 먼저 확인\n      if (window.naver && window.naver.maps) {\n        console.log('네이버 지도 API가 성공적으로 로드되었습니다!');\n        setMapLoaded(true); // 지도 API 로드 완료 표시\n      } else {\n        console.error('네이버 지도 API를 찾을 수 없습니다. window.naver:', window.naver);\n        // 0.5초 후 다시 시도\n        setTimeout(checkNaverMapsLoaded, 500);\n      }\n    };\n    \n    // 초기 시도\n    checkNaverMapsLoaded();\n    \n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      if (markerRef.current) {\n        markerRef.current.setMap(null);\n      }\n    };\n  }, []);\n  \n  // 네이버 지도 초기화\n  useEffect(() => {\n    // 지도 API가 로드되지 않은 경우 종료\n    if (!mapLoaded) return;\n    \n    console.log('지도 초기화 시작...');\n    \n    try {\n      // 1. 지도 요소 가져오기\n      const mapElement = document.getElementById('map');\n      if (!mapElement) {\n        console.error('지도를 표시할 DOM 요소를 찾을 수 없습니다.');\n        return;\n      }\n      \n      // 2. 기본 위치 설정 (세종대)\n      const defaultPosition = new window.naver.maps.LatLng(37.549186395087, 127.07505567644);\n      \n      // 3. 지도 옵션 설정\n      const mapOptions = {\n        center: defaultPosition,\n        zoom: 17,\n        zoomControl: true,\n        zoomControlOptions: {\n          position: window.naver.maps.Position.TOP_RIGHT\n        },\n        mapTypeId: window.naver.maps.MapTypeId.NORMAL,\n        mapTypeControl: true,\n      };\n      \n      // 4. 지도 객체 생성\n      console.log('지도 객체 생성 중...');\n      const map = new window.naver.maps.Map(mapElement, mapOptions);\n      mapRef.current = map;\n      console.log('지도 객체 생성 완료!');\n      \n      // 5. 현재 위치 가져오기\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          const currentPosition = new window.naver.maps.LatLng(latitude, longitude);\n          \n          // 현재 위치로 지도 이동\n          map.setCenter(currentPosition);\n          \n          // 현재 위치에 마커 표시\n          new window.naver.maps.Marker({\n            position: currentPosition,\n            map: map,\n            icon: {\n              content: '<div style=\"width: 16px; height: 16px; background-color: blue; border-radius: 50%; border: 2px solid white;\"></div>',\n              anchor: new window.naver.maps.Point(8, 8)\n            }\n          });\n          \n          console.log('현재 위치로 지도 이동:', latitude, longitude);\n        }, error => {\n          console.warn('현재 위치를 가져올 수 없습니다:', error);\n        });\n      }\n      \n      // 6. 지도 클릭 이벤트 리스너 등록\n      window.naver.maps.Event.addListener(map, 'click', function(e) {\n        // 클릭한 위치 좌표\n        const clickedPosition = e.coord;\n        \n        // 기존 마커 제거\n        removeCurrentMarker(markerRef)\n        \n        // 새 마커 생성\n        // const marker = createAndRegisterMarker(clickedPosition, map, markerRef)\n        const marker = new window.naver.maps.Marker({\n          position: clickedPosition,\n          map: map\n        });\n        markerRef.current = marker;\n        \n        // 클릭 위치의 주소 정보 가져오기 (Reverse Geocoding)\n        window.naver.maps.Service.reverseGeocode({\n          coords: clickedPosition,\n          orders: [window.naver.maps.Service.OrderType.ADDR, window.naver.maps.Service.OrderType.ROAD_ADDR].join(',')\n        }, async function(status, response) {\n          if (status !== window.naver.maps.Service.Status.OK) {\n            console.error('주소 정보를 가져오는데 실패했습니다');\n            return;\n          }\n          \n          // 주소 정보 추출\n          const address = getAddress(response.v2.address);\n          \n          // 정보창 표시 (함수로 분리)\n          await openInfoWindow({\n            map,\n            marker,\n            lat: clickedPosition.lat(),\n            lng: clickedPosition.lng(),\n            address\n          });\n          \n          // 마커 정보 업데이트\n          const markerData = {\n            lat: clickedPosition.lat(),\n            lng: clickedPosition.lng(),\n            address: address\n          };\n          \n          setMarkerInfo(markerData);\n          setCustomAddress(address); // 초기 주소를 사용자 입력용 상태에 설정\n          setShowInput(true);\n        });\n      });\n      \n      console.log('지도 초기화 완료!');\n    } catch (error) {\n      console.error('지도 초기화 중 오류 발생:', error);\n    }\n  }, [mapLoaded]); // mapLoaded 상태가 변경될 때만 실행\n\n  return (\n    <div className=\"map-page\">\n      {!mapLoaded && (\n        <div className=\"loading-message\" style={{ textAlign: 'center', padding: '20px' }}>\n          <p>네이버 지도 API를 로딩중입니다...</p>\n        </div>\n      )}\n      \n      {/* 장소명 검색 박스 */}\n      <div className=\"search-container\">\n        <div className=\"search-box\">\n          <input \n            type=\"text\" \n            className=\"search-input\" \n            placeholder=\"장소를 검색하세요\" \n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            onKeyPress={handleSearchKeyPress}\n          />\n          <button \n            className=\"search-button\" \n            onClick={searchLocationByQuery}\n          >\n            검색\n          </button>\n        </div>\n      </div>\n\n      <div className=\"map-container\">\n        <div id=\"map\" style={{ width: '100%', height: '600px', border: '1px solid #ddd' }}></div>\n      </div>\n      \n      {showInput && markerInfo && (\n        <div className=\"marker-info\">\n          <h3>선택한 위치 정보</h3>\n          <div className=\"input-group\">\n            <label htmlFor=\"address\"><strong>주소:</strong></label>\n            <div className=\"address-input-container\">\n              <input \n                type=\"text\" \n                id=\"address\" \n                value={customAddress} \n                onChange={(e) => setCustomAddress(e.target.value)}\n                onKeyPress={handleAddressKeyPress}\n                placeholder=\"주소를 입력하고 Enter 키나 검색 버튼 클릭\"\n              />\n              <button \n                type=\"button\" \n                className=\"search-address-btn\"\n                onClick={searchAddressAndUpdateMarker}\n                title=\"주소로 검색\"\n              >\n                🔍\n              </button>\n            </div>\n          </div>\n          <p><strong>위도:</strong> {markerInfo.lat.toFixed(6)}, <strong>경도:</strong> {markerInfo.lng.toFixed(6)}</p>\n          \n          {/* 이미지 업로드 섹션 */}\n          <div className=\"image-upload-section\">\n            <div className=\"image-preview-container\" onClick={triggerFileInput}>\n              {imagePreview ? (\n                <img src={imagePreview} alt=\"장소 이미지 미리보기\" className=\"image-preview\" />\n              ) : (\n                <div className=\"upload-placeholder\">\n                  <span>➕</span>\n                  <p>사진 추가</p>\n                </div>\n              )}\n            </div>\n            <input \n              type=\"file\" \n              accept=\"image/*\" \n              onChange={handleImageUpload} \n              ref={fileInputRef} \n              style={{ display: 'none' }} \n            />\n          </div>\n          \n          {/* 장소 정보 입력 폼 */}\n          <div className=\"form-container\">\n            <div className=\"input-group\">\n              <label htmlFor=\"placeName\">장소 이름:</label>\n              <input \n                type=\"text\" \n                id=\"placeName\" \n                value={placeName} \n                onChange={(e) => setPlaceName(e.target.value)} \n                placeholder=\"장소 이름을 입력하세요\"\n              />\n            </div>\n\n            <div className=\"input-group\">\n              <label htmlFor=\"placeDescription\">장소 설명:</label>\n              <textarea\n                id=\"placeDescription\"\n                value={placeDescription}\n                onChange={(e) => setPlaceDescription(e.target.value)}\n                placeholder=\"장소에 대한 설명을 입력하세요\"\n                rows=\"3\"\n                className=\"description-textarea\"\n              ></textarea>\n            </div>\n            \n            <div className=\"input-group\">\n              <label htmlFor=\"placeType\">장소 유형:</label>\n              <select \n                id=\"placeType\" \n                value={placeType}\n                onChange={(e) => setPlaceType(e.target.value)}\n              >\n                <option value=\"Landmark\">랜드마크</option>\n                <option value=\"Restaurant\">식당</option>\n                <option value=\"Cafe\">카페</option>\n                <option value=\"Shopping\">쇼핑</option>\n                <option value=\"Culture\">문화/예술</option>\n                <option value=\"Nature\">자연/공원</option>\n                <option value=\"Entertainment\">엔터테인먼트</option>\n                <option value=\"Accommodation\">숙박</option>\n              </select>\n            </div>\n            \n            <div className=\"input-group\">\n              <label htmlFor=\"stayTime\">체류 시간:</label>\n              <select \n                id=\"stayTime\" \n                value={stayTime}\n                onChange={(e) => setStayTime(e.target.value)}\n              >\n                <option value=\"0.5h\">30분</option>\n                <option value=\"1h\">1시간</option>\n                <option value=\"1.5h\">1시간 30분</option>\n                <option value=\"2h\">2시간</option>\n                <option value=\"2–3h\">2-3시간</option>\n                <option value=\"3–4h\">3-4시간</option>\n                <option value=\"4h+\">4시간 이상</option>\n              </select>\n            </div>\n          </div>\n          \n          <button onClick={saveMarkerToLocalStorage} className=\"save-button\">이 위치 저장하기</button>\n        </div>\n      )}\n      \n      <div className=\"map-guide\">\n        <p className=\"guide-text\">위치를 저장하려면 지도에서 원하는 위치를 클릭하세요.</p>\n        <p className=\"guide-text\">저장한 위치는 <strong>Saved</strong> 메뉴에서 확인할 수 있습니다.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}