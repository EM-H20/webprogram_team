{"ast":null,"code":"import _objectSpread from\"C:/Users/username/Desktop/newweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from'react';import'./Plan.css';import{infoWindowRef,showRouteBetweenPoints,openInfoWindow}from'./Map.js';import PlanModal from'../components/Modal.js';import PlanModalEdit from'../components/Modal_edit.js';import img1 from'../assets/1.PNG';import img2 from'../assets/2.PNG';import img3 from'../assets/3.PNG';import img4 from'../assets/4.PNG';import img5 from'../assets/5.PNG';import img6 from'../assets/6.PNG';import imgDefault from'../assets/dafault-place.png';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const tabList=['Plan','Place'];export default function Plan(){// 현재 선택된 탭 상태 (Plan / Favorite / Saved)\nconst[activeTab,setActiveTab]=useState('Plan');// 검색 문자열\nconst[search,setSearch]=useState('');// 로컬 스토리지에서 불러온 저장된 장소들\nconst[savedLocations,setSavedLocations]=useState([]);// 로컬 스토리지에서 불러온 저장된 계획들\nconst[savedPlans,setSavedPlans]=useState([]);// 계획 추가 모달 창 열림 여부\nconst[isPlanModalOpen,setIsPlanModalOpen]=useState(false);// 계획 수정(계획 안에 장소들 수정) 모달 창 열림 여부\nconst[isPlanModalEditOpen,setIsPlanModalEditOpen]=useState(false);// 계획 추가 시 사용될 state 변수\nconst[planName,setPlanName]=useState('');const[planDescription,setPlanDescription]=useState('');const[planUploadedImage,setPlanUploadedImage]=useState(null);// 업로드된 이미지\nconst[planImagePreview,setPlanImagePreview]=useState('');// 이미지 미리보기 URL\nconst[planEditIndex,setPlanEditIndex]=useState(0);// 계획에 포함될 장소들의 ID들을 저장하는 state 변수\nconst[placeList,setPlaceList]=useState([]);// naverMap 사용 변수수\nconst[mapLoaded,setMapLoaded]=useState(false);const markersRef=useRef([]);const mapRef=useRef(null);const currentRoutePolylinesRef=useRef([]);useEffect(()=>{// localStorage에서 저장된 장소 정보를 로드하는 함수\nconst loadSavedLocations=()=>{try{const markers=JSON.parse(localStorage.getItem('markers'))||[];// 데이터 형식 확인 및 보완\nconst processedMarkers=markers.map(marker=>_objectSpread(_objectSpread({},marker),{},{// 기본 이미지 없는 경우 처리 (내장된 이미지 사용)\nimg:marker.img||(marker.id%6===0?img6:marker.id%5===0?img5:marker.id%4===0?img4:marker.id%3===0?img3:marker.id%2===0?img2:img1),// id가 없는 경우 새로 생성\nid:marker.id||new Date().getTime()+Math.floor(Math.random()*1000),// titleKor이 없으면 name으로 설정\ntitleKor:marker.titleKor||marker.name,// titleEng가 없으면 name으로 설정\ntitleEng:marker.titleEng||marker.name,// location이 없는 경우 주소에서 추출 시도\nlocation:marker.location||extractLocation(marker.address)||'Unknown',// 기본 유형 설정\ntype:marker.type||'Landmark',// 기본 체류시간 설정\nstay:marker.stay||'1h',// 기본적으로 인기 아님\npopular:marker.popular||false,// 기본적으로 favorite 아님\nfavorite:marker.favorite||false}));setSavedLocations(processedMarkers);}catch(error){console.error('저장된 위치 정보를 불러오는 중 오류가 발생했습니다:',error);setSavedLocations([]);}};// localStorage에서 저장된 계획 정보를 로드하는 함수\nconst loadSavedplans=()=>{try{const plans=JSON.parse(localStorage.getItem('plans'))||[];setSavedPlans(plans);}catch(error){console.error('저장된 계획 정보를 불러오는 중 오류가 발생했습니다:',error);setSavedPlans([]);}};// naverMap 로드 되었는지 확인하는 함수\nconst checkNaverMapsLoaded=()=>{if(window.naver&&window.naver.maps){console.log('네이버 지도 API가 성공적으로 로드되었습니다!');setMapLoaded(true);}else{console.error('네이버 지도 API를 찾을 수 없습니다. window.naver:',window.naver);setTimeout(checkNaverMapsLoaded,500);}};loadSavedLocations();loadSavedplans();checkNaverMapsLoaded();},[]);useEffect(()=>{// 지도 API가 로드되지 않은 경우 종료\nif(!mapLoaded)return;console.log('지도 초기화 시작...');try{// 1. 지도 요소 가져오기\nconst mapElement=document.getElementById('map');if(!mapElement){console.error('지도를 표시할 DOM 요소를 찾을 수 없습니다.');return;}// 2. 기본 위치 설정 (세종대)\nconst defaultPosition=new window.naver.maps.LatLng(37.549186395087,127.07505567644);// 3. 지도 옵션 설정\nconst mapOptions={center:defaultPosition,zoom:17,mapTypeId:window.naver.maps.MapTypeId.NORMAL,mapTypeControl:true};// 4. 지도 객체 생성\nconsole.log('지도 객체 생성 중...');const map=new window.naver.maps.Map(mapElement,mapOptions);mapRef.current=map;console.log('지도 객체 생성 완료!');// 5. 현재 위치 가져오기\nif(navigator.geolocation){navigator.geolocation.getCurrentPosition(position=>{const{latitude,longitude}=position.coords;const currentPosition=new window.naver.maps.LatLng(latitude,longitude);// 현재 위치로 지도 이동\nmap.setCenter(currentPosition);console.log('현재 위치로 지도 이동:',latitude,longitude);},error=>{console.warn('현재 위치를 가져올 수 없습니다:',error);});}console.log('지도 초기화 완료!');}catch(error){console.error('지도 초기화 중 오류 발생:',error);}},[mapLoaded]);// mapLoaded 상태가 변경될 때만 실행\n// 새로운 계획 생성 함수\nconst handleAddPlan=()=>{const newPlan={id:Date.now(),title:planName===''?'빈 이름':planName,description:planDescription===''?'빈 설명':planDescription,image:planUploadedImage===null?imgDefault:planUploadedImage,savedDate:new Date().toISOString(),// 저장 날짜\nplaceList:[]};// localStorage에 기존 데이터 불러오기\nlet plans=JSON.parse(localStorage.getItem(\"plans\"))||[];// 새로운 계획 추가\nplans.push(newPlan);// localStorage에 저장\nlocalStorage.setItem(\"plans\",JSON.stringify(plans));setSavedPlans(prev=>[...prev,newPlan]);// state 초기화\nsetPlanName('');setPlanDescription('');setPlanUploadedImage(null);setPlanImagePreview('');setIsPlanModalOpen(false);};// 계획 수정(계획에 포함된 장소 수정) 함수\nconst handleEditPlan=()=>{const updatedPlans=[...savedPlans];updatedPlans[planEditIndex]=_objectSpread(_objectSpread({},updatedPlans[planEditIndex]),{},{placeList:placeList});setSavedPlans(updatedPlans);localStorage.setItem('plans',JSON.stringify(updatedPlans));setPlaceList([]);setIsPlanModalEditOpen(false);};// 계획 삭제 함수\nconst handleDeletePlan=index=>{const updatedPlans=[...savedPlans];updatedPlans.splice(index,1);setSavedPlans(updatedPlans);localStorage.setItem('plans',JSON.stringify(updatedPlans));};// 주소에서 지역명 추출 함수\nconst extractLocation=address=>{if(!address)return'';// 시/도 추출 (서울특별시, 경기도 등)\nconst cityMatch=address.match(/([^\\s]+시|[^\\s]+도|[^\\s]+군)/);if(cityMatch){// \"특별시\", \"광역시\" 등의 접미사 제거\nreturn cityMatch[0].replace(/특별시|광역시|자치시/,'').trim();}return'';};// 검색 지원을 위한 처리\nconst allPlaceData=[...savedLocations];const lowerSearch=search.trim().toLowerCase();const filtered_place=allPlaceData.filter(item=>{var _item$titleEng,_item$titleKor,_item$name;const matchSearch=((_item$titleEng=item.titleEng)===null||_item$titleEng===void 0?void 0:_item$titleEng.toLowerCase().includes(lowerSearch))||((_item$titleKor=item.titleKor)===null||_item$titleKor===void 0?void 0:_item$titleKor.toLowerCase().includes(lowerSearch))||((_item$name=item.name)===null||_item$name===void 0?void 0:_item$name.toLowerCase().includes(lowerSearch));return lowerSearch===''||matchSearch;});const allPlanData=[...savedPlans];const filtered_plan=allPlanData.filter(item=>{var _item$title;const matchSearch=(_item$title=item.title)===null||_item$title===void 0?void 0:_item$title.toLowerCase().includes(lowerSearch);return lowerSearch===''||matchSearch;});const clearAll=()=>{currentRoutePolylinesRef.current.forEach(polyline=>polyline.setMap(null));currentRoutePolylinesRef.current=[];markersRef.current.forEach(marker=>marker.setMap(null));markersRef.current=[];if(infoWindowRef.current){infoWindowRef.current.setMap(null);infoWindowRef.current=null;}};// 로컬 스토리지에서 id로 장소 가져오는 함수\nconst getLocationById=id=>{try{const markers=JSON.parse(localStorage.getItem('markers'))||[];return markers.find(marker=>marker.id===id)||null;}catch(error){console.error('로컬스토리지에서 장소를 찾는 중 오류 발생:',error);return null;}};// plan을 클릭했을 때, 경로를 보여주는 함수\nconst planRoute=async planId=>{const plan=savedPlans.find(p=>p.id===planId);if(plan){clearAll();console.log('클릭한 Plan의 장소 ID 목록:',plan.placeList);let beforePlace;for(let i=0;i<plan.placeList.length;i++){const place=getLocationById(plan.placeList[i]);if(place){if(i>=1){const[polyline,arrowMarkers]=await showRouteBetweenPoints({startLat:beforePlace.lat,startLng:beforePlace.lng,endLat:place.lat,endLng:place.lng,map:mapRef});if(polyline){currentRoutePolylinesRef.current.push(polyline);for(let j=0;j<arrowMarkers.length;j++){markersRef.current.push(arrowMarkers[j]);}}}else{const position=new window.naver.maps.LatLng(place.lat,place.lng);const map=mapRef.current;map.setCenter(position);}console.log('선택된 장소:',place.name,place.lat,place.lng);beforePlace=place;}}}else{console.warn('해당 ID의 plan을 찾을 수 없습니다:',planId);}};// 장소를 클릭했을 때, 지도로 이동, 정보창 띄우는 함수\nconst wheresPlace=async place=>{console.log(place);const position=new window.naver.maps.LatLng(place.lat,place.lng);const map=mapRef.current;map.setCenter(position);clearAll();const marker=new window.naver.maps.Marker({position:position,map:map});markersRef.current.push(marker);await openInfoWindow({map,marker,lat:position.lat(),lng:position.lng(),address:place.address});};return/*#__PURE__*/_jsxs(\"div\",{className:\"plan-page\",children:[/*#__PURE__*/_jsxs(\"section\",{className:\"plan-page__header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"plan-page__title\",children:\"\\u201CPlan your journey, live the adventure\\u201D\"}),/*#__PURE__*/_jsx(\"p\",{className:\"plan-page__subtitle\",children:\"\\u201CHit the road. Make new memories.\\u201D\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"plan-page__controls\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"plan-page__tabs\",children:tabList.map(tabName=>/*#__PURE__*/_jsx(\"button\",{className:\"tab \".concat(activeTab===tabName?'tab--active':''),onClick:()=>setActiveTab(tabName),children:tabName},tabName))}),/*#__PURE__*/_jsx(\"div\",{className:\"search\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search...\",value:search,onChange:e=>setSearch(e.target.value)})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"plan-page__content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"plan-page__list\",children:[activeTab==='Plan'&&filtered_plan.map((plan,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"plan_card\",onClick:()=>planRoute(plan.id),children:[/*#__PURE__*/_jsx(\"img\",{src:plan.image,alt:plan.title,className:\"plan_card__image\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"plan_card__body\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"plan_card__title\",children:/*#__PURE__*/_jsx(\"span\",{children:plan.title})}),/*#__PURE__*/_jsx(\"p\",{className:\"plan_card__desc\",children:plan.description})]}),/*#__PURE__*/_jsx(\"button\",{className:\"plan_card__delete\",title:\"\\uC0AD\\uC81C\\uD558\\uAE30\",onClick:()=>handleDeletePlan(index),children:\"\\xD7\"}),/*#__PURE__*/_jsx(\"button\",{className:\"plan_card__edit\",title:\"\\uC218\\uC815\\uD558\\uAE30\",onClick:()=>{setPlanEditIndex(index);setPlaceList(plan.placeList);setIsPlanModalEditOpen(true);},children:\"\\uD83D\\uDD89\"})]},plan.id)),activeTab==='Plan'&&/*#__PURE__*/_jsx(\"button\",{className:\"plan_card__add-button\",onClick:()=>setIsPlanModalOpen(true),children:\"+ \\uD50C\\uB79C \\uCD94\\uAC00\"}),activeTab==='Place'&&filtered_place.map(place=>/*#__PURE__*/_jsxs(\"div\",{className:\"plan_card\",onClick:()=>wheresPlace(place),children:[/*#__PURE__*/_jsx(\"img\",{src:place.img,alt:place.name,className:\"plan_card__image\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"plan_card__body\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"plan_card__title\",children:/*#__PURE__*/_jsx(\"span\",{children:place.name})}),/*#__PURE__*/_jsx(\"p\",{className:\"plan_card__desc\",children:place.description}),place.address&&/*#__PURE__*/_jsx(\"div\",{className:\"plan_card__address\",children:/*#__PURE__*/_jsx(\"span\",{children:place.address})})]}),/*#__PURE__*/_jsx(\"span\",{className:\"plan_card__favorite\".concat(place.favorite?' --active':''),children:place.favorite?'♥':'♡'})]},place.id))]}),/*#__PURE__*/_jsx(\"div\",{className:\"plan-page__map\",children:/*#__PURE__*/_jsx(\"div\",{id:\"map\",className:\"map-placeholder\",children:\"\\uC9C0\\uB3C4 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uC5EC\\uAE30\\uC5D0 \\uB4E4\\uC5B4\\uAC11\\uB2C8\\uB2E4.\"})})]}),/*#__PURE__*/_jsx(PlanModal,{visible:isPlanModalOpen,onClose:()=>setIsPlanModalOpen(false),onCreate:handleAddPlan,planName:planName,setPlanName:setPlanName,description:planDescription,setDescription:setPlanDescription,uploadedImage:planUploadedImage,setUploadedImage:setPlanUploadedImage,imagePreview:planImagePreview,setImagePreview:setPlanImagePreview}),/*#__PURE__*/_jsx(PlanModalEdit,{visible:isPlanModalEditOpen,onClose:()=>setIsPlanModalEditOpen(false),onEdit:handleEditPlan,placeList:placeList,setPlaceList:setPlaceList,savedLocations:savedLocations})]});}","map":{"version":3,"names":["React","useState","useEffect","useRef","infoWindowRef","showRouteBetweenPoints","openInfoWindow","PlanModal","PlanModalEdit","img1","img2","img3","img4","img5","img6","imgDefault","jsx","_jsx","jsxs","_jsxs","tabList","Plan","activeTab","setActiveTab","search","setSearch","savedLocations","setSavedLocations","savedPlans","setSavedPlans","isPlanModalOpen","setIsPlanModalOpen","isPlanModalEditOpen","setIsPlanModalEditOpen","planName","setPlanName","planDescription","setPlanDescription","planUploadedImage","setPlanUploadedImage","planImagePreview","setPlanImagePreview","planEditIndex","setPlanEditIndex","placeList","setPlaceList","mapLoaded","setMapLoaded","markersRef","mapRef","currentRoutePolylinesRef","loadSavedLocations","markers","JSON","parse","localStorage","getItem","processedMarkers","map","marker","_objectSpread","img","id","Date","getTime","Math","floor","random","titleKor","name","titleEng","location","extractLocation","address","type","stay","popular","favorite","error","console","loadSavedplans","plans","checkNaverMapsLoaded","window","naver","maps","log","setTimeout","mapElement","document","getElementById","defaultPosition","LatLng","mapOptions","center","zoom","mapTypeId","MapTypeId","NORMAL","mapTypeControl","Map","current","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","currentPosition","setCenter","warn","handleAddPlan","newPlan","now","title","description","image","savedDate","toISOString","push","setItem","stringify","prev","handleEditPlan","updatedPlans","handleDeletePlan","index","splice","cityMatch","match","replace","trim","allPlaceData","lowerSearch","toLowerCase","filtered_place","filter","item","_item$titleEng","_item$titleKor","_item$name","matchSearch","includes","allPlanData","filtered_plan","_item$title","clearAll","forEach","polyline","setMap","getLocationById","find","planRoute","planId","plan","p","beforePlace","i","length","place","arrowMarkers","startLat","lat","startLng","lng","endLat","endLng","j","wheresPlace","Marker","className","children","tabName","concat","onClick","placeholder","value","onChange","e","target","src","alt","visible","onClose","onCreate","setDescription","uploadedImage","setUploadedImage","imagePreview","setImagePreview","onEdit"],"sources":["C:/Users/username/Desktop/newweb/src/pages/Plan.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Plan.css';\nimport { infoWindowRef, showRouteBetweenPoints, openInfoWindow } from './Map.js';\nimport PlanModal from '../components/Modal.js';\nimport PlanModalEdit from '../components/Modal_edit.js';\n\nimport img1 from '../assets/1.PNG';\nimport img2 from '../assets/2.PNG';\nimport img3 from '../assets/3.PNG';\nimport img4 from '../assets/4.PNG';\nimport img5 from '../assets/5.PNG';\nimport img6 from '../assets/6.PNG';\nimport imgDefault from '../assets/dafault-place.png';\n\n\nconst tabList = ['Plan', 'Place'];\n\n\nexport default function Plan() {\n  // 현재 선택된 탭 상태 (Plan / Favorite / Saved)\n  const [activeTab, setActiveTab] = useState('Plan');\n  // 검색 문자열\n  const [search, setSearch] = useState('');\n  // 로컬 스토리지에서 불러온 저장된 장소들\n  const [savedLocations, setSavedLocations] = useState([]);\n  // 로컬 스토리지에서 불러온 저장된 계획들\n  const [savedPlans, setSavedPlans] = useState([]);\n  \n  // 계획 추가 모달 창 열림 여부\n  const [isPlanModalOpen, setIsPlanModalOpen] = useState(false);\n  // 계획 수정(계획 안에 장소들 수정) 모달 창 열림 여부\n  const [isPlanModalEditOpen, setIsPlanModalEditOpen] = useState(false);\n\n  // 계획 추가 시 사용될 state 변수\n  const [planName, setPlanName] = useState('');\n  const [planDescription, setPlanDescription] = useState('');\n  const [planUploadedImage, setPlanUploadedImage] = useState(null); // 업로드된 이미지\n  const [planImagePreview, setPlanImagePreview] = useState(''); // 이미지 미리보기 URL\n  const [planEditIndex, setPlanEditIndex] = useState(0);\n  // 계획에 포함될 장소들의 ID들을 저장하는 state 변수\n  const [placeList, setPlaceList] = useState([]);\n\n  // naverMap 사용 변수수\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const markersRef = useRef([]);\n  const mapRef = useRef(null);\n  const currentRoutePolylinesRef = useRef([]);\n  \n  useEffect(() => {\n    // localStorage에서 저장된 장소 정보를 로드하는 함수\n    const loadSavedLocations = () => {\n      try {\n        const markers = JSON.parse(localStorage.getItem('markers')) || [];\n        // 데이터 형식 확인 및 보완\n        const processedMarkers = markers.map(marker => ({\n          ...marker,\n          // 기본 이미지 없는 경우 처리 (내장된 이미지 사용)\n          img: marker.img || (marker.id % 6 === 0 ? img6 : \n                marker.id % 5 === 0 ? img5 :\n                marker.id % 4 === 0 ? img4 :\n                marker.id % 3 === 0 ? img3 :\n                marker.id % 2 === 0 ? img2 : img1),\n          // id가 없는 경우 새로 생성\n          id: marker.id || new Date().getTime() + Math.floor(Math.random() * 1000),\n          // titleKor이 없으면 name으로 설정\n          titleKor: marker.titleKor || marker.name,\n          // titleEng가 없으면 name으로 설정\n          titleEng: marker.titleEng || marker.name,\n          // location이 없는 경우 주소에서 추출 시도\n          location: marker.location || extractLocation(marker.address) || 'Unknown',\n          // 기본 유형 설정\n          type: marker.type || 'Landmark',\n          // 기본 체류시간 설정\n          stay: marker.stay || '1h',\n          // 기본적으로 인기 아님\n          popular: marker.popular || false,\n          // 기본적으로 favorite 아님\n          favorite: marker.favorite || false\n        }));\n        setSavedLocations(processedMarkers);\n      } catch (error) {\n        console.error('저장된 위치 정보를 불러오는 중 오류가 발생했습니다:', error);\n        setSavedLocations([]);\n      }\n    };\n    // localStorage에서 저장된 계획 정보를 로드하는 함수\n    const loadSavedplans = () => {\n      try {\n        const plans = JSON.parse(localStorage.getItem('plans')) || [];\n        setSavedPlans(plans);\n      } catch (error) {\n        console.error('저장된 계획 정보를 불러오는 중 오류가 발생했습니다:', error);\n        setSavedPlans([]);\n      }\n    };\n\n    // naverMap 로드 되었는지 확인하는 함수\n    const checkNaverMapsLoaded = () => {\n      if (window.naver && window.naver.maps) {\n        console.log('네이버 지도 API가 성공적으로 로드되었습니다!');\n        setMapLoaded(true);\n      } else {\n        console.error('네이버 지도 API를 찾을 수 없습니다. window.naver:', window.naver);\n        setTimeout(checkNaverMapsLoaded, 500);\n      }\n    };\n    \n    loadSavedLocations();\n    loadSavedplans();\n    checkNaverMapsLoaded();\n  }, []);\n\n  useEffect(() => {\n      // 지도 API가 로드되지 않은 경우 종료\n      if (!mapLoaded) return;\n      \n      console.log('지도 초기화 시작...');\n      \n      try {\n        // 1. 지도 요소 가져오기\n        const mapElement = document.getElementById('map');\n        if (!mapElement) {\n          console.error('지도를 표시할 DOM 요소를 찾을 수 없습니다.');\n          return;\n        }\n        \n        // 2. 기본 위치 설정 (세종대)\n        const defaultPosition = new window.naver.maps.LatLng(37.549186395087, 127.07505567644);\n        \n        // 3. 지도 옵션 설정\n        const mapOptions = {\n          center: defaultPosition,\n          zoom: 17,\n          mapTypeId: window.naver.maps.MapTypeId.NORMAL,\n          mapTypeControl: true,\n        };\n        \n        // 4. 지도 객체 생성\n        console.log('지도 객체 생성 중...');\n        const map = new window.naver.maps.Map(mapElement, mapOptions);\n        mapRef.current = map;\n        console.log('지도 객체 생성 완료!');\n        \n        // 5. 현재 위치 가져오기\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(position => {\n            const { latitude, longitude } = position.coords;\n            const currentPosition = new window.naver.maps.LatLng(latitude, longitude);\n            \n            // 현재 위치로 지도 이동\n            map.setCenter(currentPosition);\n            \n            console.log('현재 위치로 지도 이동:', latitude, longitude);\n          }, error => {\n            console.warn('현재 위치를 가져올 수 없습니다:', error);\n          });\n        }\n        \n        console.log('지도 초기화 완료!');\n      } catch (error) {\n        console.error('지도 초기화 중 오류 발생:', error);\n      }\n    }, [mapLoaded]); // mapLoaded 상태가 변경될 때만 실행\n\n  // 새로운 계획 생성 함수\n  const handleAddPlan = () => {\n    const newPlan = {\n      id: Date.now(),\n      title: planName === '' ? '빈 이름' : planName,\n      description: planDescription === '' ? '빈 설명' : planDescription,\n      image: planUploadedImage === null ? imgDefault : planUploadedImage,\n      savedDate: new Date().toISOString(), // 저장 날짜\n      placeList: [],\n    };\n\n    // localStorage에 기존 데이터 불러오기\n    let plans = JSON.parse(localStorage.getItem(\"plans\")) || [];\n    // 새로운 계획 추가\n    plans.push(newPlan);\n    // localStorage에 저장\n    localStorage.setItem(\"plans\", JSON.stringify(plans));\n\n    setSavedPlans(prev => [...prev, newPlan]);\n\n    // state 초기화\n    setPlanName('');\n    setPlanDescription('');\n    setPlanUploadedImage(null);\n    setPlanImagePreview('');\n    setIsPlanModalOpen(false);\n  };\n\n  // 계획 수정(계획에 포함된 장소 수정) 함수\n  const handleEditPlan = () => {\n    const updatedPlans = [...savedPlans];\n    updatedPlans[planEditIndex] = {\n      ...updatedPlans[planEditIndex],\n      placeList: placeList,\n    };\n\n    setSavedPlans(updatedPlans);\n    localStorage.setItem('plans', JSON.stringify(updatedPlans));\n\n    setPlaceList([]);\n    setIsPlanModalEditOpen(false);\n  };\n\n  // 계획 삭제 함수\n  const handleDeletePlan = (index) => {\n    const updatedPlans = [...savedPlans];\n    updatedPlans.splice(index, 1);\n    setSavedPlans(updatedPlans);\n    localStorage.setItem('plans', JSON.stringify(updatedPlans));\n  };\n\n  // 주소에서 지역명 추출 함수\n  const extractLocation = (address) => {\n    if (!address) return '';\n    \n    // 시/도 추출 (서울특별시, 경기도 등)\n    const cityMatch = address.match(/([^\\s]+시|[^\\s]+도|[^\\s]+군)/);\n    if (cityMatch) {\n      // \"특별시\", \"광역시\" 등의 접미사 제거\n      return cityMatch[0].replace(/특별시|광역시|자치시/, '').trim();\n    }\n    return '';\n  };\n\n  // 검색 지원을 위한 처리\n  const allPlaceData = [\n    ...savedLocations\n  ];\n  const lowerSearch = search.trim().toLowerCase();\n  const filtered_place = allPlaceData.filter(item => {\n    const matchSearch =\n      item.titleEng?.toLowerCase().includes(lowerSearch) ||\n      item.titleKor?.toLowerCase().includes(lowerSearch) ||\n      item.name?.toLowerCase().includes(lowerSearch);\n    return lowerSearch === '' || matchSearch;\n  });\n\n  const allPlanData = [\n    ...savedPlans\n  ];\n  const filtered_plan = allPlanData.filter(item => {\n    const matchSearch =\n      item.title?.toLowerCase().includes(lowerSearch);\n    return lowerSearch === '' || matchSearch;\n  });\n\n  const clearAll = () => {\n    currentRoutePolylinesRef.current.forEach(polyline => polyline.setMap(null));\n    currentRoutePolylinesRef.current = [];\n    markersRef.current.forEach(marker => marker.setMap(null));\n    markersRef.current = [];\n    if (infoWindowRef.current) {\n      infoWindowRef.current.setMap(null);\n      infoWindowRef.current = null;\n    }\n  };\n\n  // 로컬 스토리지에서 id로 장소 가져오는 함수\n  const getLocationById = (id) => {\n    try {\n      const markers = JSON.parse(localStorage.getItem('markers')) || [];\n      return markers.find(marker => marker.id === id) || null;\n    } catch (error) {\n      console.error('로컬스토리지에서 장소를 찾는 중 오류 발생:', error);\n      return null;\n    }\n  };\n\n  // plan을 클릭했을 때, 경로를 보여주는 함수\n  const planRoute = async (planId) => {\n    const plan = savedPlans.find(p => p.id === planId);\n    if (plan) {\n      clearAll();\n      console.log('클릭한 Plan의 장소 ID 목록:', plan.placeList);\n\n      let beforePlace;\n\n      for(let i=0;i<plan.placeList.length;i++) {\n        const place = getLocationById(plan.placeList[i]);\n        if(place) {\n          if(i>=1) {\n            const [polyline, arrowMarkers] = await showRouteBetweenPoints({\n              startLat: beforePlace.lat,\n              startLng: beforePlace.lng,\n              endLat: place.lat,\n              endLng: place.lng,\n              map: mapRef\n            });\n            if(polyline) {\n              currentRoutePolylinesRef.current.push(polyline);\n              for(let j=0;j<arrowMarkers.length;j++) {\n                markersRef.current.push(arrowMarkers[j]);\n              }\n            }\n          } else {\n            const position = new window.naver.maps.LatLng(place.lat, place.lng);\n            const map = mapRef.current;\n            map.setCenter(position);\n          }\n          console.log('선택된 장소:', place.name, place.lat, place.lng);\n          beforePlace = place;\n        }\n      }\n    } else {\n      console.warn('해당 ID의 plan을 찾을 수 없습니다:', planId);\n    }\n  };\n\n  // 장소를 클릭했을 때, 지도로 이동, 정보창 띄우는 함수\n  const wheresPlace = async (place) => {\n    console.log(place);\n    const position = new window.naver.maps.LatLng(place.lat, place.lng);\n    const map = mapRef.current;\n    map.setCenter(position);\n\n    clearAll();\n    const marker = new window.naver.maps.Marker({\n      position: position,\n      map: map\n    });\n    markersRef.current.push(marker);\n\n    await openInfoWindow({\n      map,\n      marker,\n      lat: position.lat(),\n      lng: position.lng(),\n      address: place.address\n    });\n  }\n\n  return (\n    <div className=\"plan-page\">\n      {/* 1. 상단 타이틀 영역 */}\n      <section className=\"plan-page__header\">\n        <h1 className=\"plan-page__title\">“Plan your journey, live the adventure”</h1>\n        <p className=\"plan-page__subtitle\">“Hit the road. Make new memories.”</p>\n      </section>\n\n      {/* 2. 탭 및 필터 아이콘 영역 */}\n      <div className=\"plan-page__controls\">\n        <div className=\"plan-page__tabs\">\n          {tabList.map((tabName) => (\n            <button\n              key={tabName}\n              className={`tab ${activeTab === tabName ? 'tab--active' : ''}`}\n              onClick={() => setActiveTab(tabName)}\n            >\n              {tabName}\n            </button>\n          ))}\n        </div>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search...\"\n            value={search}\n            onChange={e => setSearch(e.target.value)}\n          />\n        </div>\n      </div>\n\n      {/* 3. 메인 콘텐츠: 좌측 카드 리스트 + 우측 지도 영역 */}\n      <div className=\"plan-page__content\">\n        {/* 좌측 카드 리스트 */}\n        <div className=\"plan-page__list\">\n\n          {/* Plan 탭 */}\n          {activeTab === 'Plan' && filtered_plan.map((plan, index) => (\n            <div key={plan.id} className=\"plan_card\" onClick={() => planRoute(plan.id)}>\n              <img\n                src={plan.image}\n                alt={plan.title}\n                className=\"plan_card__image\"\n              />\n              <div className=\"plan_card__body\">\n                <div className=\"plan_card__title\">\n                  <span>{plan.title}</span>\n                </div>\n                <p className=\"plan_card__desc\">{plan.description}</p>\n              </div>\n              {/* favorite */}\n              <button className=\"plan_card__delete\" title=\"삭제하기\" onClick={() => handleDeletePlan(index)}>×</button>\n              <button className=\"plan_card__edit\" title=\"수정하기\" onClick={() => {setPlanEditIndex(index); setPlaceList(plan.placeList); setIsPlanModalEditOpen(true);}}>🖉</button>\n            </div>\n          ))}\n          {activeTab === 'Plan' && \n            <button\n              className=\"plan_card__add-button\"\n              onClick={() => setIsPlanModalOpen(true)}\n            >\n              + 플랜 추가\n            </button>\n          }\n\n          {/* Place 탭 */}\n          {activeTab === 'Place' && filtered_place.map((place) => (\n            <div key={place.id} className=\"plan_card\" onClick={() => wheresPlace(place)}>\n              <img\n                src={place.img}\n                alt={place.name}\n                className=\"plan_card__image\"\n              />\n              <div className=\"plan_card__body\">\n                <div className=\"plan_card__title\">\n                  <span>{place.name}</span>\n                </div>\n                <p className=\"plan_card__desc\">{place.description}</p>\n                {place.address && (\n                  <div className=\"plan_card__address\">\n                    <span>{place.address}</span>\n                  </div>\n                )}\n              </div>\n              <span className={`plan_card__favorite${place.favorite ? ' --active' : ''}`} >{place.favorite ? '♥' : '♡'}</span>\n            </div>\n          ))}\n        </div>\n\n        {/* 우측 지도 영역 */}\n        <div className=\"plan-page__map\">\n          <div id=\"map\" className=\"map-placeholder\">\n            지도 컴포넌트가 여기에 들어갑니다.\n          </div>\n        </div>\n      </div>\n\n      <PlanModal\n        visible={isPlanModalOpen}\n        onClose={() => setIsPlanModalOpen(false)}\n        onCreate={handleAddPlan}\n        planName={planName}\n        setPlanName={setPlanName}\n        description={planDescription}\n        setDescription={setPlanDescription}\n        uploadedImage={planUploadedImage}\n        setUploadedImage={setPlanUploadedImage}\n        imagePreview={planImagePreview}\n        setImagePreview={setPlanImagePreview}\n      />\n      \n      <PlanModalEdit\n        visible={isPlanModalEditOpen}\n        onClose={() => setIsPlanModalEditOpen(false)}\n        onEdit={handleEditPlan}\n        placeList={placeList}\n        setPlaceList={setPlaceList}\n        savedLocations={savedLocations}\n      />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}