{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\username\\\\Desktop\\\\newweb\\\\src\\\\pages\\\\Plan.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Plan.css';\nimport { infoWindowRef, showRouteBetweenPoints, openInfoWindow } from './Map.js';\nimport PlanModal from '../components/Modal.js';\nimport PlanModalEdit from '../components/Modal_edit.js';\nimport img1 from '../assets/1.PNG';\nimport img2 from '../assets/2.PNG';\nimport img3 from '../assets/3.PNG';\nimport img4 from '../assets/4.PNG';\nimport img5 from '../assets/5.PNG';\nimport img6 from '../assets/6.PNG';\nimport imgDefault from '../assets/dafault-place.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tabList = ['Plan', 'Place'];\nexport default function Plan() {\n  _s();\n  // 현재 선택된 탭 상태 (Plan / Favorite / Saved)\n  const [activeTab, setActiveTab] = useState('Plan');\n  // 검색 문자열\n  const [search, setSearch] = useState('');\n  // 로컬 스토리지에서 불러온 저장된 장소들\n  const [savedLocations, setSavedLocations] = useState([]);\n  // 로컬 스토리지에서 불러온 저장된 계획들\n  const [savedPlans, setSavedPlans] = useState([]);\n\n  // 계획 추가 모달 창 열림 여부\n  const [isPlanModalOpen, setIsPlanModalOpen] = useState(false);\n  // 계획 수정(계획 안에 장소들 수정) 모달 창 열림 여부\n  const [isPlanModalEditOpen, setIsPlanModalEditOpen] = useState(false);\n\n  // 계획 추가 시 사용될 state 변수\n  const [planName, setPlanName] = useState('');\n  const [planDescription, setPlanDescription] = useState('');\n  const [planUploadedImage, setPlanUploadedImage] = useState(null); // 업로드된 이미지\n  const [planImagePreview, setPlanImagePreview] = useState(''); // 이미지 미리보기 URL\n  const [planEditIndex, setPlanEditIndex] = useState(0);\n  // 계획에 포함될 장소들의 ID들을 저장하는 state 변수\n  const [placeList, setPlaceList] = useState([]);\n\n  // naverMap 사용 변수수\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const markersRef = useRef([]);\n  const mapRef = useRef(null);\n  const currentRoutePolylinesRef = useRef([]);\n  useEffect(() => {\n    // localStorage에서 저장된 장소 정보를 로드하는 함수\n    const loadSavedLocations = () => {\n      try {\n        const markers = JSON.parse(localStorage.getItem('markers')) || [];\n        // 데이터 형식 확인 및 보완\n        const processedMarkers = markers.map(marker => ({\n          ...marker,\n          // 기본 이미지 없는 경우 처리 (내장된 이미지 사용)\n          img: marker.img || (marker.id % 6 === 0 ? img6 : marker.id % 5 === 0 ? img5 : marker.id % 4 === 0 ? img4 : marker.id % 3 === 0 ? img3 : marker.id % 2 === 0 ? img2 : img1),\n          // id가 없는 경우 새로 생성\n          id: marker.id || new Date().getTime() + Math.floor(Math.random() * 1000),\n          // titleKor이 없으면 name으로 설정\n          titleKor: marker.titleKor || marker.name,\n          // titleEng가 없으면 name으로 설정\n          titleEng: marker.titleEng || marker.name,\n          // location이 없는 경우 주소에서 추출 시도\n          location: marker.location || extractLocation(marker.address) || 'Unknown',\n          // 기본 유형 설정\n          type: marker.type || 'Landmark',\n          // 기본 체류시간 설정\n          stay: marker.stay || '1h',\n          // 기본적으로 인기 아님\n          popular: marker.popular || false,\n          // 기본적으로 favorite 아님\n          favorite: marker.favorite || false\n        }));\n        setSavedLocations(processedMarkers);\n      } catch (error) {\n        console.error('저장된 위치 정보를 불러오는 중 오류가 발생했습니다:', error);\n        setSavedLocations([]);\n      }\n    };\n    // localStorage에서 저장된 계획 정보를 로드하는 함수\n    const loadSavedplans = () => {\n      try {\n        const plans = JSON.parse(localStorage.getItem('plans')) || [];\n        setSavedPlans(plans);\n      } catch (error) {\n        console.error('저장된 계획 정보를 불러오는 중 오류가 발생했습니다:', error);\n        setSavedPlans([]);\n      }\n    };\n\n    // naverMap 로드 되었는지 확인하는 함수\n    const checkNaverMapsLoaded = () => {\n      if (window.naver && window.naver.maps) {\n        console.log('네이버 지도 API가 성공적으로 로드되었습니다!');\n        setMapLoaded(true);\n      } else {\n        console.error('네이버 지도 API를 찾을 수 없습니다. window.naver:', window.naver);\n        setTimeout(checkNaverMapsLoaded, 500);\n      }\n    };\n    loadSavedLocations();\n    loadSavedplans();\n    checkNaverMapsLoaded();\n  }, []);\n  useEffect(() => {\n    // 지도 API가 로드되지 않은 경우 종료\n    if (!mapLoaded) return;\n    console.log('지도 초기화 시작...');\n    try {\n      // 1. 지도 요소 가져오기\n      const mapElement = document.getElementById('map');\n      if (!mapElement) {\n        console.error('지도를 표시할 DOM 요소를 찾을 수 없습니다.');\n        return;\n      }\n\n      // 2. 기본 위치 설정 (세종대)\n      const defaultPosition = new window.naver.maps.LatLng(37.549186395087, 127.07505567644);\n\n      // 3. 지도 옵션 설정\n      const mapOptions = {\n        center: defaultPosition,\n        zoom: 17,\n        mapTypeId: window.naver.maps.MapTypeId.NORMAL,\n        mapTypeControl: true\n      };\n\n      // 4. 지도 객체 생성\n      console.log('지도 객체 생성 중...');\n      const map = new window.naver.maps.Map(mapElement, mapOptions);\n      mapRef.current = map;\n      console.log('지도 객체 생성 완료!');\n\n      // 5. 현재 위치 가져오기\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          const currentPosition = new window.naver.maps.LatLng(latitude, longitude);\n\n          // 현재 위치로 지도 이동\n          map.setCenter(currentPosition);\n          console.log('현재 위치로 지도 이동:', latitude, longitude);\n        }, error => {\n          console.warn('현재 위치를 가져올 수 없습니다:', error);\n        });\n      }\n      console.log('지도 초기화 완료!');\n    } catch (error) {\n      console.error('지도 초기화 중 오류 발생:', error);\n    }\n  }, [mapLoaded]); // mapLoaded 상태가 변경될 때만 실행\n\n  // 새로운 계획 생성 함수\n  const handleAddPlan = () => {\n    const newPlan = {\n      id: Date.now(),\n      title: planName === '' ? '빈 이름' : planName,\n      description: planDescription === '' ? '빈 설명' : planDescription,\n      image: planUploadedImage === null ? imgDefault : planUploadedImage,\n      savedDate: new Date().toISOString(),\n      // 저장 날짜\n      placeList: []\n    };\n\n    // localStorage에 기존 데이터 불러오기\n    let plans = JSON.parse(localStorage.getItem(\"plans\")) || [];\n    // 새로운 계획 추가\n    plans.push(newPlan);\n    // localStorage에 저장\n    localStorage.setItem(\"plans\", JSON.stringify(plans));\n    setSavedPlans(prev => [...prev, newPlan]);\n\n    // state 초기화\n    setPlanName('');\n    setPlanDescription('');\n    setPlanUploadedImage(null);\n    setPlanImagePreview('');\n    setIsPlanModalOpen(false);\n  };\n\n  // 계획 수정(계획에 포함된 장소 수정) 함수\n  const handleEditPlan = () => {\n    const updatedPlans = [...savedPlans];\n    updatedPlans[planEditIndex] = {\n      ...updatedPlans[planEditIndex],\n      placeList: placeList\n    };\n    setSavedPlans(updatedPlans);\n    localStorage.setItem('plans', JSON.stringify(updatedPlans));\n    setPlaceList([]);\n    setIsPlanModalEditOpen(false);\n  };\n\n  // 계획 삭제 함수\n  const handleDeletePlan = index => {\n    const updatedPlans = [...savedPlans];\n    updatedPlans.splice(index, 1);\n    setSavedPlans(updatedPlans);\n    localStorage.setItem('plans', JSON.stringify(updatedPlans));\n  };\n\n  // 주소에서 지역명 추출 함수\n  const extractLocation = address => {\n    if (!address) return '';\n\n    // 시/도 추출 (서울특별시, 경기도 등)\n    const cityMatch = address.match(/([^\\s]+시|[^\\s]+도|[^\\s]+군)/);\n    if (cityMatch) {\n      // \"특별시\", \"광역시\" 등의 접미사 제거\n      return cityMatch[0].replace(/특별시|광역시|자치시/, '').trim();\n    }\n    return '';\n  };\n\n  // 검색 지원을 위한 처리\n  const allPlaceData = [...savedLocations];\n  const lowerSearch = search.trim().toLowerCase();\n  const filtered_place = allPlaceData.filter(item => {\n    var _item$titleEng, _item$titleKor, _item$name;\n    const matchSearch = ((_item$titleEng = item.titleEng) === null || _item$titleEng === void 0 ? void 0 : _item$titleEng.toLowerCase().includes(lowerSearch)) || ((_item$titleKor = item.titleKor) === null || _item$titleKor === void 0 ? void 0 : _item$titleKor.toLowerCase().includes(lowerSearch)) || ((_item$name = item.name) === null || _item$name === void 0 ? void 0 : _item$name.toLowerCase().includes(lowerSearch));\n    return lowerSearch === '' || matchSearch;\n  });\n  const allPlanData = [...savedPlans];\n  const filtered_plan = allPlanData.filter(item => {\n    var _item$title;\n    const matchSearch = (_item$title = item.title) === null || _item$title === void 0 ? void 0 : _item$title.toLowerCase().includes(lowerSearch);\n    return lowerSearch === '' || matchSearch;\n  });\n  const clearAll = () => {\n    currentRoutePolylinesRef.current.forEach(polyline => polyline.setMap(null));\n    currentRoutePolylinesRef.current = [];\n    markersRef.current.forEach(marker => marker.setMap(null));\n    markersRef.current = [];\n    if (infoWindowRef.current) {\n      infoWindowRef.current.setMap(null);\n      infoWindowRef.current = null;\n    }\n  };\n\n  // 로컬 스토리지에서 id로 장소 가져오는 함수\n  const getLocationById = id => {\n    try {\n      const markers = JSON.parse(localStorage.getItem('markers')) || [];\n      return markers.find(marker => marker.id === id) || null;\n    } catch (error) {\n      console.error('로컬스토리지에서 장소를 찾는 중 오류 발생:', error);\n      return null;\n    }\n  };\n\n  // plan을 클릭했을 때, 경로를 보여주는 함수\n  const planRoute = async planId => {\n    const plan = savedPlans.find(p => p.id === planId);\n    if (plan) {\n      clearAll();\n      console.log('클릭한 Plan의 장소 ID 목록:', plan.placeList);\n      let beforePlace;\n      for (let i = 0; i < plan.placeList.length; i++) {\n        const place = getLocationById(plan.placeList[i]);\n        if (place) {\n          if (i >= 1) {\n            const [polyline, arrowMarkers] = await showRouteBetweenPoints({\n              startLat: beforePlace.lat,\n              startLng: beforePlace.lng,\n              endLat: place.lat,\n              endLng: place.lng,\n              map: mapRef\n            });\n            if (polyline) {\n              currentRoutePolylinesRef.current.push(polyline);\n              for (let j = 0; j < arrowMarkers.length; j++) {\n                markersRef.current.push(arrowMarkers[j]);\n              }\n            }\n          } else {\n            const position = new window.naver.maps.LatLng(place.lat, place.lng);\n            const map = mapRef.current;\n            map.setCenter(position);\n          }\n          console.log('선택된 장소:', place.name, place.lat, place.lng);\n          beforePlace = place;\n        }\n      }\n    } else {\n      console.warn('해당 ID의 plan을 찾을 수 없습니다:', planId);\n    }\n  };\n\n  // 장소를 클릭했을 때, 지도로 이동, 정보창 띄우는 함수\n  const wheresPlace = async place => {\n    console.log(place);\n    const position = new window.naver.maps.LatLng(place.lat, place.lng);\n    const map = mapRef.current;\n    map.setCenter(position);\n    clearAll();\n    const marker = new window.naver.maps.Marker({\n      position: position,\n      map: map\n    });\n    markersRef.current.push(marker);\n    await openInfoWindow({\n      map,\n      marker,\n      lat: position.lat(),\n      lng: position.lng(),\n      address: place.address\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plan-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"plan-page__header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"plan-page__title\",\n        children: \"\\u201CPlan your journey, live the adventure\\u201D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"plan-page__subtitle\",\n        children: \"\\u201CHit the road. Make new memories.\\u201D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plan-page__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-page__tabs\",\n        children: tabList.map(tabName => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab ${activeTab === tabName ? 'tab--active' : ''}`,\n          onClick: () => setActiveTab(tabName),\n          children: tabName\n        }, tabName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search...\",\n          value: search,\n          onChange: e => setSearch(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plan-page__content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-page__list\",\n        children: [activeTab === 'Plan' && filtered_plan.map((plan, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan_card\",\n          onClick: () => planRoute(plan.id),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: plan.image,\n            alt: plan.title,\n            className: \"plan_card__image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"plan_card__body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"plan_card__title\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: plan.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"plan_card__desc\",\n              children: plan.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"plan_card__delete\",\n            title: \"\\uC0AD\\uC81C\\uD558\\uAE30\",\n            onClick: () => handleDeletePlan(index),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"plan_card__edit\",\n            title: \"\\uC218\\uC815\\uD558\\uAE30\",\n            onClick: () => {\n              setPlanEditIndex(index);\n              setPlaceList(plan.placeList);\n              setIsPlanModalEditOpen(true);\n            },\n            children: \"\\uD83D\\uDD89\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this)]\n        }, plan.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this)), activeTab === 'Plan' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"plan_card__add-button\",\n          onClick: () => setIsPlanModalOpen(true),\n          children: \"+ \\uD50C\\uB79C \\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }, this), activeTab === 'Place' && filtered_place.map(place => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan_card\",\n          onClick: () => wheresPlace(place),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: place.img,\n            alt: place.name,\n            className: \"plan_card__image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"plan_card__body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"plan_card__title\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: place.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"plan_card__desc\",\n              children: place.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 17\n            }, this), place.address && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"plan_card__address\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: place.address\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `plan_card__favorite${place.favorite ? ' --active' : ''}`,\n            children: place.favorite ? '♥' : '♡'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this)]\n        }, place.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-page__map\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\",\n          className: \"map-placeholder\",\n          children: \"\\uC9C0\\uB3C4 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uC5EC\\uAE30\\uC5D0 \\uB4E4\\uC5B4\\uAC11\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlanModal, {\n      visible: isPlanModalOpen,\n      onClose: () => setIsPlanModalOpen(false),\n      onCreate: handleAddPlan,\n      planName: planName,\n      setPlanName: setPlanName,\n      description: planDescription,\n      setDescription: setPlanDescription,\n      uploadedImage: planUploadedImage,\n      setUploadedImage: setPlanUploadedImage,\n      imagePreview: planImagePreview,\n      setImagePreview: setPlanImagePreview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlanModalEdit, {\n      visible: isPlanModalEditOpen,\n      onClose: () => setIsPlanModalEditOpen(false),\n      onEdit: handleEditPlan,\n      placeList: placeList,\n      setPlaceList: setPlaceList,\n      savedLocations: savedLocations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n}\n_s(Plan, \"0YKdrJCKdRwqCiCZMtUeCh2AsEY=\");\n_c = Plan;\nvar _c;\n$RefreshReg$(_c, \"Plan\");","map":{"version":3,"names":["React","useState","useEffect","useRef","infoWindowRef","showRouteBetweenPoints","openInfoWindow","PlanModal","PlanModalEdit","img1","img2","img3","img4","img5","img6","imgDefault","jsxDEV","_jsxDEV","tabList","Plan","_s","activeTab","setActiveTab","search","setSearch","savedLocations","setSavedLocations","savedPlans","setSavedPlans","isPlanModalOpen","setIsPlanModalOpen","isPlanModalEditOpen","setIsPlanModalEditOpen","planName","setPlanName","planDescription","setPlanDescription","planUploadedImage","setPlanUploadedImage","planImagePreview","setPlanImagePreview","planEditIndex","setPlanEditIndex","placeList","setPlaceList","mapLoaded","setMapLoaded","markersRef","mapRef","currentRoutePolylinesRef","loadSavedLocations","markers","JSON","parse","localStorage","getItem","processedMarkers","map","marker","img","id","Date","getTime","Math","floor","random","titleKor","name","titleEng","location","extractLocation","address","type","stay","popular","favorite","error","console","loadSavedplans","plans","checkNaverMapsLoaded","window","naver","maps","log","setTimeout","mapElement","document","getElementById","defaultPosition","LatLng","mapOptions","center","zoom","mapTypeId","MapTypeId","NORMAL","mapTypeControl","Map","current","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","currentPosition","setCenter","warn","handleAddPlan","newPlan","now","title","description","image","savedDate","toISOString","push","setItem","stringify","prev","handleEditPlan","updatedPlans","handleDeletePlan","index","splice","cityMatch","match","replace","trim","allPlaceData","lowerSearch","toLowerCase","filtered_place","filter","item","_item$titleEng","_item$titleKor","_item$name","matchSearch","includes","allPlanData","filtered_plan","_item$title","clearAll","forEach","polyline","setMap","getLocationById","find","planRoute","planId","plan","p","beforePlace","i","length","place","arrowMarkers","startLat","lat","startLng","lng","endLat","endLng","j","wheresPlace","Marker","className","children","fileName","_jsxFileName","lineNumber","columnNumber","tabName","onClick","placeholder","value","onChange","e","target","src","alt","visible","onClose","onCreate","setDescription","uploadedImage","setUploadedImage","imagePreview","setImagePreview","onEdit","_c","$RefreshReg$"],"sources":["C:/Users/username/Desktop/newweb/src/pages/Plan.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Plan.css';\nimport { infoWindowRef, showRouteBetweenPoints, openInfoWindow } from './Map.js';\nimport PlanModal from '../components/Modal.js';\nimport PlanModalEdit from '../components/Modal_edit.js';\n\nimport img1 from '../assets/1.PNG';\nimport img2 from '../assets/2.PNG';\nimport img3 from '../assets/3.PNG';\nimport img4 from '../assets/4.PNG';\nimport img5 from '../assets/5.PNG';\nimport img6 from '../assets/6.PNG';\nimport imgDefault from '../assets/dafault-place.png';\n\n\nconst tabList = ['Plan', 'Place'];\n\n\nexport default function Plan() {\n  // 현재 선택된 탭 상태 (Plan / Favorite / Saved)\n  const [activeTab, setActiveTab] = useState('Plan');\n  // 검색 문자열\n  const [search, setSearch] = useState('');\n  // 로컬 스토리지에서 불러온 저장된 장소들\n  const [savedLocations, setSavedLocations] = useState([]);\n  // 로컬 스토리지에서 불러온 저장된 계획들\n  const [savedPlans, setSavedPlans] = useState([]);\n  \n  // 계획 추가 모달 창 열림 여부\n  const [isPlanModalOpen, setIsPlanModalOpen] = useState(false);\n  // 계획 수정(계획 안에 장소들 수정) 모달 창 열림 여부\n  const [isPlanModalEditOpen, setIsPlanModalEditOpen] = useState(false);\n\n  // 계획 추가 시 사용될 state 변수\n  const [planName, setPlanName] = useState('');\n  const [planDescription, setPlanDescription] = useState('');\n  const [planUploadedImage, setPlanUploadedImage] = useState(null); // 업로드된 이미지\n  const [planImagePreview, setPlanImagePreview] = useState(''); // 이미지 미리보기 URL\n  const [planEditIndex, setPlanEditIndex] = useState(0);\n  // 계획에 포함될 장소들의 ID들을 저장하는 state 변수\n  const [placeList, setPlaceList] = useState([]);\n\n  // naverMap 사용 변수수\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const markersRef = useRef([]);\n  const mapRef = useRef(null);\n  const currentRoutePolylinesRef = useRef([]);\n  \n  useEffect(() => {\n    // localStorage에서 저장된 장소 정보를 로드하는 함수\n    const loadSavedLocations = () => {\n      try {\n        const markers = JSON.parse(localStorage.getItem('markers')) || [];\n        // 데이터 형식 확인 및 보완\n        const processedMarkers = markers.map(marker => ({\n          ...marker,\n          // 기본 이미지 없는 경우 처리 (내장된 이미지 사용)\n          img: marker.img || (marker.id % 6 === 0 ? img6 : \n                marker.id % 5 === 0 ? img5 :\n                marker.id % 4 === 0 ? img4 :\n                marker.id % 3 === 0 ? img3 :\n                marker.id % 2 === 0 ? img2 : img1),\n          // id가 없는 경우 새로 생성\n          id: marker.id || new Date().getTime() + Math.floor(Math.random() * 1000),\n          // titleKor이 없으면 name으로 설정\n          titleKor: marker.titleKor || marker.name,\n          // titleEng가 없으면 name으로 설정\n          titleEng: marker.titleEng || marker.name,\n          // location이 없는 경우 주소에서 추출 시도\n          location: marker.location || extractLocation(marker.address) || 'Unknown',\n          // 기본 유형 설정\n          type: marker.type || 'Landmark',\n          // 기본 체류시간 설정\n          stay: marker.stay || '1h',\n          // 기본적으로 인기 아님\n          popular: marker.popular || false,\n          // 기본적으로 favorite 아님\n          favorite: marker.favorite || false\n        }));\n        setSavedLocations(processedMarkers);\n      } catch (error) {\n        console.error('저장된 위치 정보를 불러오는 중 오류가 발생했습니다:', error);\n        setSavedLocations([]);\n      }\n    };\n    // localStorage에서 저장된 계획 정보를 로드하는 함수\n    const loadSavedplans = () => {\n      try {\n        const plans = JSON.parse(localStorage.getItem('plans')) || [];\n        setSavedPlans(plans);\n      } catch (error) {\n        console.error('저장된 계획 정보를 불러오는 중 오류가 발생했습니다:', error);\n        setSavedPlans([]);\n      }\n    };\n\n    // naverMap 로드 되었는지 확인하는 함수\n    const checkNaverMapsLoaded = () => {\n      if (window.naver && window.naver.maps) {\n        console.log('네이버 지도 API가 성공적으로 로드되었습니다!');\n        setMapLoaded(true);\n      } else {\n        console.error('네이버 지도 API를 찾을 수 없습니다. window.naver:', window.naver);\n        setTimeout(checkNaverMapsLoaded, 500);\n      }\n    };\n    \n    loadSavedLocations();\n    loadSavedplans();\n    checkNaverMapsLoaded();\n  }, []);\n\n  useEffect(() => {\n      // 지도 API가 로드되지 않은 경우 종료\n      if (!mapLoaded) return;\n      \n      console.log('지도 초기화 시작...');\n      \n      try {\n        // 1. 지도 요소 가져오기\n        const mapElement = document.getElementById('map');\n        if (!mapElement) {\n          console.error('지도를 표시할 DOM 요소를 찾을 수 없습니다.');\n          return;\n        }\n        \n        // 2. 기본 위치 설정 (세종대)\n        const defaultPosition = new window.naver.maps.LatLng(37.549186395087, 127.07505567644);\n        \n        // 3. 지도 옵션 설정\n        const mapOptions = {\n          center: defaultPosition,\n          zoom: 17,\n          mapTypeId: window.naver.maps.MapTypeId.NORMAL,\n          mapTypeControl: true,\n        };\n        \n        // 4. 지도 객체 생성\n        console.log('지도 객체 생성 중...');\n        const map = new window.naver.maps.Map(mapElement, mapOptions);\n        mapRef.current = map;\n        console.log('지도 객체 생성 완료!');\n        \n        // 5. 현재 위치 가져오기\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(position => {\n            const { latitude, longitude } = position.coords;\n            const currentPosition = new window.naver.maps.LatLng(latitude, longitude);\n            \n            // 현재 위치로 지도 이동\n            map.setCenter(currentPosition);\n            \n            console.log('현재 위치로 지도 이동:', latitude, longitude);\n          }, error => {\n            console.warn('현재 위치를 가져올 수 없습니다:', error);\n          });\n        }\n        \n        console.log('지도 초기화 완료!');\n      } catch (error) {\n        console.error('지도 초기화 중 오류 발생:', error);\n      }\n    }, [mapLoaded]); // mapLoaded 상태가 변경될 때만 실행\n\n  // 새로운 계획 생성 함수\n  const handleAddPlan = () => {\n    const newPlan = {\n      id: Date.now(),\n      title: planName === '' ? '빈 이름' : planName,\n      description: planDescription === '' ? '빈 설명' : planDescription,\n      image: planUploadedImage === null ? imgDefault : planUploadedImage,\n      savedDate: new Date().toISOString(), // 저장 날짜\n      placeList: [],\n    };\n\n    // localStorage에 기존 데이터 불러오기\n    let plans = JSON.parse(localStorage.getItem(\"plans\")) || [];\n    // 새로운 계획 추가\n    plans.push(newPlan);\n    // localStorage에 저장\n    localStorage.setItem(\"plans\", JSON.stringify(plans));\n\n    setSavedPlans(prev => [...prev, newPlan]);\n\n    // state 초기화\n    setPlanName('');\n    setPlanDescription('');\n    setPlanUploadedImage(null);\n    setPlanImagePreview('');\n    setIsPlanModalOpen(false);\n  };\n\n  // 계획 수정(계획에 포함된 장소 수정) 함수\n  const handleEditPlan = () => {\n    const updatedPlans = [...savedPlans];\n    updatedPlans[planEditIndex] = {\n      ...updatedPlans[planEditIndex],\n      placeList: placeList,\n    };\n\n    setSavedPlans(updatedPlans);\n    localStorage.setItem('plans', JSON.stringify(updatedPlans));\n\n    setPlaceList([]);\n    setIsPlanModalEditOpen(false);\n  };\n\n  // 계획 삭제 함수\n  const handleDeletePlan = (index) => {\n    const updatedPlans = [...savedPlans];\n    updatedPlans.splice(index, 1);\n    setSavedPlans(updatedPlans);\n    localStorage.setItem('plans', JSON.stringify(updatedPlans));\n  };\n\n  // 주소에서 지역명 추출 함수\n  const extractLocation = (address) => {\n    if (!address) return '';\n    \n    // 시/도 추출 (서울특별시, 경기도 등)\n    const cityMatch = address.match(/([^\\s]+시|[^\\s]+도|[^\\s]+군)/);\n    if (cityMatch) {\n      // \"특별시\", \"광역시\" 등의 접미사 제거\n      return cityMatch[0].replace(/특별시|광역시|자치시/, '').trim();\n    }\n    return '';\n  };\n\n  // 검색 지원을 위한 처리\n  const allPlaceData = [\n    ...savedLocations\n  ];\n  const lowerSearch = search.trim().toLowerCase();\n  const filtered_place = allPlaceData.filter(item => {\n    const matchSearch =\n      item.titleEng?.toLowerCase().includes(lowerSearch) ||\n      item.titleKor?.toLowerCase().includes(lowerSearch) ||\n      item.name?.toLowerCase().includes(lowerSearch);\n    return lowerSearch === '' || matchSearch;\n  });\n\n  const allPlanData = [\n    ...savedPlans\n  ];\n  const filtered_plan = allPlanData.filter(item => {\n    const matchSearch =\n      item.title?.toLowerCase().includes(lowerSearch);\n    return lowerSearch === '' || matchSearch;\n  });\n\n  const clearAll = () => {\n    currentRoutePolylinesRef.current.forEach(polyline => polyline.setMap(null));\n    currentRoutePolylinesRef.current = [];\n    markersRef.current.forEach(marker => marker.setMap(null));\n    markersRef.current = [];\n    if (infoWindowRef.current) {\n      infoWindowRef.current.setMap(null);\n      infoWindowRef.current = null;\n    }\n  };\n\n  // 로컬 스토리지에서 id로 장소 가져오는 함수\n  const getLocationById = (id) => {\n    try {\n      const markers = JSON.parse(localStorage.getItem('markers')) || [];\n      return markers.find(marker => marker.id === id) || null;\n    } catch (error) {\n      console.error('로컬스토리지에서 장소를 찾는 중 오류 발생:', error);\n      return null;\n    }\n  };\n\n  // plan을 클릭했을 때, 경로를 보여주는 함수\n  const planRoute = async (planId) => {\n    const plan = savedPlans.find(p => p.id === planId);\n    if (plan) {\n      clearAll();\n      console.log('클릭한 Plan의 장소 ID 목록:', plan.placeList);\n\n      let beforePlace;\n\n      for(let i=0;i<plan.placeList.length;i++) {\n        const place = getLocationById(plan.placeList[i]);\n        if(place) {\n          if(i>=1) {\n            const [polyline, arrowMarkers] = await showRouteBetweenPoints({\n              startLat: beforePlace.lat,\n              startLng: beforePlace.lng,\n              endLat: place.lat,\n              endLng: place.lng,\n              map: mapRef\n            });\n            if(polyline) {\n              currentRoutePolylinesRef.current.push(polyline);\n              for(let j=0;j<arrowMarkers.length;j++) {\n                markersRef.current.push(arrowMarkers[j]);\n              }\n            }\n          } else {\n            const position = new window.naver.maps.LatLng(place.lat, place.lng);\n            const map = mapRef.current;\n            map.setCenter(position);\n          }\n          console.log('선택된 장소:', place.name, place.lat, place.lng);\n          beforePlace = place;\n        }\n      }\n    } else {\n      console.warn('해당 ID의 plan을 찾을 수 없습니다:', planId);\n    }\n  };\n\n  // 장소를 클릭했을 때, 지도로 이동, 정보창 띄우는 함수\n  const wheresPlace = async (place) => {\n    console.log(place);\n    const position = new window.naver.maps.LatLng(place.lat, place.lng);\n    const map = mapRef.current;\n    map.setCenter(position);\n\n    clearAll();\n    const marker = new window.naver.maps.Marker({\n      position: position,\n      map: map\n    });\n    markersRef.current.push(marker);\n\n    await openInfoWindow({\n      map,\n      marker,\n      lat: position.lat(),\n      lng: position.lng(),\n      address: place.address\n    });\n  }\n\n  return (\n    <div className=\"plan-page\">\n      {/* 1. 상단 타이틀 영역 */}\n      <section className=\"plan-page__header\">\n        <h1 className=\"plan-page__title\">“Plan your journey, live the adventure”</h1>\n        <p className=\"plan-page__subtitle\">“Hit the road. Make new memories.”</p>\n      </section>\n\n      {/* 2. 탭 및 필터 아이콘 영역 */}\n      <div className=\"plan-page__controls\">\n        <div className=\"plan-page__tabs\">\n          {tabList.map((tabName) => (\n            <button\n              key={tabName}\n              className={`tab ${activeTab === tabName ? 'tab--active' : ''}`}\n              onClick={() => setActiveTab(tabName)}\n            >\n              {tabName}\n            </button>\n          ))}\n        </div>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search...\"\n            value={search}\n            onChange={e => setSearch(e.target.value)}\n          />\n        </div>\n      </div>\n\n      {/* 3. 메인 콘텐츠: 좌측 카드 리스트 + 우측 지도 영역 */}\n      <div className=\"plan-page__content\">\n        {/* 좌측 카드 리스트 */}\n        <div className=\"plan-page__list\">\n\n          {/* Plan 탭 */}\n          {activeTab === 'Plan' && filtered_plan.map((plan, index) => (\n            <div key={plan.id} className=\"plan_card\" onClick={() => planRoute(plan.id)}>\n              <img\n                src={plan.image}\n                alt={plan.title}\n                className=\"plan_card__image\"\n              />\n              <div className=\"plan_card__body\">\n                <div className=\"plan_card__title\">\n                  <span>{plan.title}</span>\n                </div>\n                <p className=\"plan_card__desc\">{plan.description}</p>\n              </div>\n              {/* favorite */}\n              <button className=\"plan_card__delete\" title=\"삭제하기\" onClick={() => handleDeletePlan(index)}>×</button>\n              <button className=\"plan_card__edit\" title=\"수정하기\" onClick={() => {setPlanEditIndex(index); setPlaceList(plan.placeList); setIsPlanModalEditOpen(true);}}>🖉</button>\n            </div>\n          ))}\n          {activeTab === 'Plan' && \n            <button\n              className=\"plan_card__add-button\"\n              onClick={() => setIsPlanModalOpen(true)}\n            >\n              + 플랜 추가\n            </button>\n          }\n\n          {/* Place 탭 */}\n          {activeTab === 'Place' && filtered_place.map((place) => (\n            <div key={place.id} className=\"plan_card\" onClick={() => wheresPlace(place)}>\n              <img\n                src={place.img}\n                alt={place.name}\n                className=\"plan_card__image\"\n              />\n              <div className=\"plan_card__body\">\n                <div className=\"plan_card__title\">\n                  <span>{place.name}</span>\n                </div>\n                <p className=\"plan_card__desc\">{place.description}</p>\n                {place.address && (\n                  <div className=\"plan_card__address\">\n                    <span>{place.address}</span>\n                  </div>\n                )}\n              </div>\n              <span className={`plan_card__favorite${place.favorite ? ' --active' : ''}`} >{place.favorite ? '♥' : '♡'}</span>\n            </div>\n          ))}\n        </div>\n\n        {/* 우측 지도 영역 */}\n        <div className=\"plan-page__map\">\n          <div id=\"map\" className=\"map-placeholder\">\n            지도 컴포넌트가 여기에 들어갑니다.\n          </div>\n        </div>\n      </div>\n\n      <PlanModal\n        visible={isPlanModalOpen}\n        onClose={() => setIsPlanModalOpen(false)}\n        onCreate={handleAddPlan}\n        planName={planName}\n        setPlanName={setPlanName}\n        description={planDescription}\n        setDescription={setPlanDescription}\n        uploadedImage={planUploadedImage}\n        setUploadedImage={setPlanUploadedImage}\n        imagePreview={planImagePreview}\n        setImagePreview={setPlanImagePreview}\n      />\n      \n      <PlanModalEdit\n        visible={isPlanModalEditOpen}\n        onClose={() => setIsPlanModalEditOpen(false)}\n        onEdit={handleEditPlan}\n        placeList={placeList}\n        setPlaceList={setPlaceList}\n        savedLocations={savedLocations}\n      />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}