{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlatj\\\\Desktop\\\\webprogram_team\\\\src\\\\pages\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './Map.css';\nimport defaultImage from '../assets/dafault-place.png'; // 새로 추가된 기본 이미지 사용\n\n// InfoWindow 생성 및 오픈을 담당하는 함수 (컴포넌트 내부에서 사용)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function openInfoWindow({\n  map,\n  marker,\n  lat,\n  lng,\n  address\n}) {\n  const place = await getPlaceNameFromCoords(lat, lng);\n  const infoWindow = new window.naver.maps.InfoWindow({\n    content: `\n      <div style=\"padding: 10px; min-width: 200px;\">\n        <p>위도: ${lat.toFixed(6)}</p>\n        <p>경도: ${lng.toFixed(6)}</p>\n        <p>장소: ${place || address}</p>\n      </div>\n    `,\n    borderColor: '#ccc',\n    borderWidth: 1,\n    anchorSize: new window.naver.maps.Size(10, 10)\n  });\n  infoWindow.open(map, marker);\n}\nconst searchNaverPlace = async query => {\n  try {\n    const response = await fetch(`http://localhost:5001/api/search?query=${encodeURIComponent(query)}`);\n    const data = await response.json();\n    console.log(data); // 리턴받은 장소\n    return data;\n  } catch (err) {\n    return null;\n  }\n};\n\n// 클릭한 지역 장소명 검색\nconst getPlaceNameFromCoords = async (lat, lng) => {\n  try {\n    const response = await fetch(`http://localhost:5001/api/poi?lat=${lat}&lng=${lng}`);\n    const data = await response.json();\n    if (data.documents && data.documents.length > 0) {\n      const nearest = getNearestPlace(lat, lng, data.documents);\n      return nearest.place_name;\n    } else {\n      return null;\n    }\n  } catch (err) {\n    console.error('장소 이름 가져오기 실패:', err);\n    return null;\n  }\n};\n\n// 가장 가까운 장소 뽑아내기\nconst getNearestPlace = (lat, lng, items) => {\n  if (!items || items.length === 0) return null;\n  return items.sort((a, b) => a.distance - b.distance)[0]; // 가장 가까운 1개\n};\nasync function showRouteBetweenPoints({\n  startLat,\n  startLng,\n  endLat,\n  endLng,\n  map\n}) {\n  const routeData = await fetchNaverRoute(startLat, startLng, endLat, endLng);\n  if (routeData) {\n    drawRouteOnMap(map, routeData);\n  }\n}\nlet currentRoutePolyline = null;\nfunction drawRouteOnMap(map, pathData) {\n  var _pathData$route, _pathData$route$traop, _pathData$route$traop2;\n  if (!(pathData !== null && pathData !== void 0 && (_pathData$route = pathData.route) !== null && _pathData$route !== void 0 && (_pathData$route$traop = _pathData$route.traoptimal) !== null && _pathData$route$traop !== void 0 && (_pathData$route$traop2 = _pathData$route$traop[0]) !== null && _pathData$route$traop2 !== void 0 && _pathData$route$traop2.path)) {\n    console.log('경로 데이터가 올바르지 않습니다.');\n    return;\n  }\n  const rawPath = pathData.route.traoptimal[0].path;\n  const convertedPath = rawPath.map(([lng, lat]) => new window.naver.maps.LatLng(lat, lng));\n  currentRoutePolyline = new window.naver.maps.Polyline({\n    map: map,\n    path: convertedPath,\n    strokeColor: '#007BFF',\n    strokeWeight: 5\n  });\n}\nasync function fetchNaverRoute(startLat, startLng, endLat, endLng) {\n  const start = `${startLng},${startLat}`; // 경로는 \"lng,lat\" 순서\n  const goal = `${endLng},${endLat}`;\n  try {\n    // const response = await fetch(`http://localhost:5001/api/route/drive?start=${start}&goal=${goal}`); // 자동차\n    // const response = await fetch(`http://localhost:5001/api/route/pedestrian?start=${start}&goal=${goal}`); // 도보\n    const response = await fetch('http://localhost:5001/api/route/pedestrian', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        start,\n        goal\n      })\n    }).then(res => res.json()).then(data => console.log(data)).catch(err => console.error(err));\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('경로 API 호출 실패:', err);\n    return null;\n  }\n}\n\n// 중복 제거: 기존 마커 제거\nfunction removeCurrentMarker(markerRef) {\n  if (markerRef.current) {\n    markerRef.current.setMap(null);\n  }\n}\n\n// 중복 제거: 새 마커 생성 및 등록\nfunction createAndRegisterMarker(position, mapRef, markerRef) {\n  const marker = new window.naver.maps.Marker({\n    position,\n    map: mapRef.current\n  });\n  markerRef.current = marker;\n  return marker;\n}\n\n// 중복 제거: 마커 정보 상태 업데이트\nfunction updateMarkerInfo(setMarkerInfo, lat, lng, address) {\n  setMarkerInfo({\n    lat,\n    lng,\n    address\n  });\n}\nfunction getAddress(address) {\n  return address.roadAddress || address.jibunAddress;\n}\nfunction Map() {\n  _s();\n  // 상태 관리\n  const [markerInfo, setMarkerInfo] = useState(null);\n  const [showInput, setShowInput] = useState(false);\n  const [placeName, setPlaceName] = useState('');\n  const [placeDescription, setPlaceDescription] = useState(''); // 장소 설명 추가\n  const [placeType, setPlaceType] = useState('Landmark'); // 장소 유형\n  const [stayTime, setStayTime] = useState('1h'); // 체류 시간\n  const [uploadedImage, setUploadedImage] = useState(null); // 업로드된 이미지\n  const [imagePreview, setImagePreview] = useState(''); // 이미지 미리보기 URL\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [customAddress, setCustomAddress] = useState(''); // 사용자가 직접 입력한 주소\n  const [originalAddress, setOriginalAddress] = useState(''); // 네이버 API에서 받아온 원본 주소\n  const [searchQuery, setSearchQuery] = useState(''); // 장소 검색어 추가\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const fileInputRef = useRef(null);\n\n  // 장소명으로 검색\n  const searchLocationByQuery = async () => {\n    if (!searchQuery.trim() || !mapRef.current) return;\n    try {\n      // 장소 검색\n      const data = await searchNaverPlace(searchQuery.trim());\n      if (!data || data.length === 0) {\n        alert('검색 결과가 없습니다.');\n        return;\n      }\n      console.log(data[0]);\n      const place = data[0];\n      const lat = place.lat;\n      const lng = place.lng;\n      const position = new window.naver.maps.LatLng(lat, lng);\n      setPlaceName(place.name);\n      const finalAddress = place.address;\n      setCustomAddress(finalAddress);\n      setOriginalAddress(finalAddress);\n\n      // 지도 이동\n      mapRef.current.setCenter(position);\n\n      // 기존 마커 제거\n      removeCurrentMarker(markerRef);\n\n      // 새 마커 생성 및 등록\n      const marker = createAndRegisterMarker(position, mapRef, markerRef);\n\n      // 정보창 표시\n      await openInfoWindow({\n        map: mapRef.current,\n        marker,\n        lat: lat,\n        lng: lng,\n        address: searchQuery.trim()\n      });\n\n      // 마커 정보 업데이트\n      updateMarkerInfo(setMarkerInfo, lat, lng, searchQuery.trim());\n      setShowInput(true);\n    } catch (error) {\n      console.error('장소 검색 실패:', error);\n      alert('장소 검색 중 문제가 발생했습니다.');\n    }\n  };\n\n  // 주소로 마커 위치 업데이트\n  const searchAddressAndUpdateMarker = () => {\n    if (!customAddress.trim() || !mapRef.current) return;\n\n    // 지오코딩 서비스를 사용하여 주소를 좌표로 변환\n    window.naver.maps.Service.geocode({\n      query: customAddress\n    }, async (status, response) => {\n      if (status !== window.naver.maps.Service.Status.OK) {\n        alert('입력하신 주소를 찾을 수 없습니다. 다른 주소를 입력해주세요.');\n        return;\n      }\n\n      // 검색 결과가 없는 경우\n      if (response.v2.meta.totalCount === 0) {\n        alert('검색 결과가 없습니다. 다른 주소를 입력해주세요.');\n        return;\n      }\n\n      // 처음 검색된 주소 정보 가져오기\n      const firstItem = response.v2.addresses[0];\n      const position = new window.naver.maps.LatLng(firstItem.y, firstItem.x);\n\n      // 지도 이동\n      mapRef.current.setCenter(position);\n\n      // 기존 마커 제거 (함수로 분리)\n      removeCurrentMarker(markerRef);\n\n      // 새 마커 생성 및 등록 (함수로 분리)\n      const marker = createAndRegisterMarker(position, mapRef, markerRef);\n      const fullAddress = getAddress(firstItem);\n\n      // 정보창 표시 (함수로 분리)\n      await openInfoWindow({\n        map: mapRef.current,\n        marker,\n        lat: position.lat(),\n        lng: position.lng(),\n        address: fullAddress\n      });\n\n      // 마커 정보 상태 업데이트 (함수로 분리)\n      updateMarkerInfo(setMarkerInfo, position.lat(), position.lng(), fullAddress);\n\n      // 이미 주소가 입력되어 있으니 customAddress는 업데이트하지 않음\n    });\n  };\n\n  // 주소 입력 후 일정 시간이 지나면 자동으로 검색하는 기능 (선택적)\n  // 현재는 사용자가 검색 버튼을 클릭하거나 Enter 키를 누르는 경우에만 검색되도록 설정\n\n  // 이미지 선택 핸들러\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    if (file) {\n      // 파일 크기 검사 (최대 5MB로 제한)\n      if (file.size > 5 * 1024 * 1024) {\n        alert('이미지 크기는 5MB 이하여야 합니다.');\n        return;\n      }\n\n      // 파일 타입 검사\n      if (!file.type.match('image.*')) {\n        alert('이미지 파일만 업로드 가능합니다.');\n        return;\n      }\n\n      // 이미지를 Base64로 인코딩\n      const reader = new FileReader();\n      reader.onload = event => {\n        setUploadedImage(event.target.result); // Base64 문자열 저장\n        setImagePreview(event.target.result); // 미리보기용 URL 설정\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // 이미지 업로드 버튼 클릭 핸들러\n  const triggerFileInput = () => {\n    fileInputRef.current.click();\n  };\n\n  // 주소에서 지역 추출 (예: \"서울특별시 광진구...\" -> \"서울\")\n  const extractLocation = address => {\n    if (!address) return '';\n\n    // 시/도 추출 (서울특별시, 경기도 등)\n    const cityMatch = address.match(/([^\\s]+시|[^\\s]+도|[^\\s]+군|[^\\s]+구)/);\n    if (cityMatch) {\n      // \"특별시\", \"광역시\" 등의 접미사 제거\n      return cityMatch[0].replace(/특별시|광역시|자치시/, '').trim();\n    }\n    return '';\n  };\n\n  // 주소 입력 필드에서 Enter 키 입력 시 주소 검색 실행\n  const handleAddressKeyPress = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      searchAddressAndUpdateMarker();\n    }\n  };\n\n  // 장소명 검색 필드에서 Enter 키 입력 시 장소 검색 실행\n  const handleSearchKeyPress = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      searchLocationByQuery();\n    }\n  };\n\n  // 장소를 localStorage에 저장\n  const saveMarkerToLocalStorage = () => {\n    if (!markerInfo) return;\n\n    // 필수 입력 확인\n    const name = placeName.trim();\n    if (!name) {\n      alert('장소 이름을 입력해주세요.');\n      return;\n    }\n\n    // 네이버 API에서 받아온 원본 주소를 우선적으로 사용\n    // 원본 주소가 없는 경우에만 사용자가 입력한 주소 사용\n    const finalAddress = originalAddress.trim() || markerInfo.address;\n\n    // 장소 위치 (시/도) 추출\n    const location = extractLocation(finalAddress);\n\n    // 현재 시간을 ID로 사용\n    const id = new Date().getTime();\n    const markerObj = {\n      id: id,\n      name: name,\n      description: placeDescription,\n      // 장소 설명 추가\n      address: finalAddress,\n      lat: markerInfo.lat,\n      lng: markerInfo.lng,\n      img: uploadedImage || defaultImage,\n      // 업로드된 이미지 또는 기본 이미지\n      location: location,\n      // 추출한 위치 (서울, 부산 등)\n      type: placeType,\n      // 장소 유형\n      stay: stayTime,\n      // 체류 시간\n      popular: false,\n      // 기본값으로 인기 장소 아님\n      savedDate: new Date().toISOString(),\n      // 저장 날짜\n      favorite: false\n    };\n\n    // localStorage에 기존 데이터 불러오기\n    let markers = JSON.parse(localStorage.getItem(\"markers\")) || [];\n    markers.push(markerObj);\n\n    // localStorage에 저장\n    localStorage.setItem(\"markers\", JSON.stringify(markers));\n\n    // 저장 완료 알림 및 상태 초기화\n    alert('위치가 저장되었습니다! Saved 메뉴에서 확인하세요.');\n    setPlaceName('');\n    setPlaceDescription('');\n    setPlaceType('Landmark');\n    setStayTime('1h');\n    setUploadedImage(null);\n    setImagePreview('');\n    setSearchQuery('');\n    setCustomAddress('');\n    setOriginalAddress('');\n    setShowInput(false);\n  };\n\n  // 마운트 후 네이버 지도 API 확인\n  useEffect(() => {\n    const checkNaverMapsLoaded = () => {\n      // window.naver 객체가 존재하는지 먼저 확인\n      if (window.naver && window.naver.maps) {\n        console.log('네이버 지도 API가 성공적으로 로드되었습니다!');\n        setMapLoaded(true); // 지도 API 로드 완료 표시\n      } else {\n        console.error('네이버 지도 API를 찾을 수 없습니다. window.naver:', window.naver);\n        // 0.5초 후 다시 시도\n        setTimeout(checkNaverMapsLoaded, 500);\n      }\n    };\n\n    // 초기 시도\n    checkNaverMapsLoaded();\n\n    // 컴포넌트 언마운트 시 정리\n    return () => {\n      if (markerRef.current) {\n        markerRef.current.setMap(null);\n      }\n    };\n  }, []);\n\n  // 네이버 지도 초기화\n  useEffect(() => {\n    // 지도 API가 로드되지 않은 경우 종료\n    if (!mapLoaded) return;\n    console.log('지도 초기화 시작...');\n    try {\n      // 1. 지도 요소 가져오기\n      const mapElement = document.getElementById('map');\n      if (!mapElement) {\n        console.error('지도를 표시할 DOM 요소를 찾을 수 없습니다.');\n        return;\n      }\n\n      // 2. 기본 위치 설정 (세종대)\n      const defaultPosition = new window.naver.maps.LatLng(37.549186395087, 127.07505567644);\n\n      // 3. 지도 옵션 설정\n      const mapOptions = {\n        center: defaultPosition,\n        zoom: 17,\n        zoomControl: true,\n        zoomControlOptions: {\n          position: window.naver.maps.Position.TOP_RIGHT\n        },\n        mapTypeId: window.naver.maps.MapTypeId.NORMAL,\n        mapTypeControl: true\n      };\n\n      // 4. 지도 객체 생성\n      console.log('지도 객체 생성 중...');\n      const map = new window.naver.maps.Map(mapElement, mapOptions);\n      mapRef.current = map;\n      console.log('지도 객체 생성 완료!');\n\n      // 5. 현재 위치 가져오기\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          const currentPosition = new window.naver.maps.LatLng(latitude, longitude);\n\n          // 현재 위치로 지도 이동\n          map.setCenter(currentPosition);\n\n          // 현재 위치에 마커 표시\n          new window.naver.maps.Marker({\n            position: currentPosition,\n            map: map,\n            icon: {\n              content: '<div style=\"width: 16px; height: 16px; background-color: blue; border-radius: 50%; border: 2px solid white;\"></div>',\n              anchor: new window.naver.maps.Point(8, 8)\n            }\n          });\n          console.log('현재 위치로 지도 이동:', latitude, longitude);\n        }, error => {\n          console.warn('현재 위치를 가져올 수 없습니다:', error);\n        });\n      }\n\n      // 6. 지도 클릭 이벤트 리스너 등록\n      window.naver.maps.Event.addListener(map, 'click', function (e) {\n        // 클릭한 위치 좌표\n        const clickedPosition = e.coord;\n        const beforemarker = markerRef.current;\n\n        // 기존 마커 제거\n        removeCurrentMarker(markerRef);\n\n        // 새 마커 생성\n        // const marker = createAndRegisterMarker(clickedPosition, map, markerRef)\n        const marker = new window.naver.maps.Marker({\n          position: clickedPosition,\n          map: map\n        });\n        markerRef.current = marker;\n\n        // 클릭 위치의 주소 정보 가져오기 (Reverse Geocoding)\n        window.naver.maps.Service.reverseGeocode({\n          coords: clickedPosition,\n          orders: [window.naver.maps.Service.OrderType.ADDR, window.naver.maps.Service.OrderType.ROAD_ADDR].join(',')\n        }, async function (status, response) {\n          if (status !== window.naver.maps.Service.Status.OK) {\n            console.error('주소 정보를 가져오는데 실패했습니다');\n            return;\n          }\n\n          // 주소 정보 추출\n          const address = getAddress(response.v2.address);\n\n          // 정보창 표시 (함수로 분리)\n          await openInfoWindow({\n            map,\n            marker,\n            lat: clickedPosition.lat(),\n            lng: clickedPosition.lng(),\n            address\n          });\n\n          // 마커 정보 업데이트\n          const markerData = {\n            lat: clickedPosition.lat(),\n            lng: clickedPosition.lng(),\n            address: address\n          };\n          if (beforemarker != null) {\n            const beforeLat = beforemarker.getPosition().lat();\n            const beforeLng = beforemarker.getPosition().lng();\n            if (currentRoutePolyline) currentRoutePolyline.setMap(null);\n            showRouteBetweenPoints({\n              startLat: beforeLat,\n              startLng: beforeLng,\n              endLat: clickedPosition.lat(),\n              endLng: clickedPosition.lng(),\n              map: map\n            });\n          }\n          setMarkerInfo(markerData);\n          setCustomAddress(address); // 초기 주소를 사용자 입력용 상태에 설정\n          setShowInput(true);\n        });\n      });\n      console.log('지도 초기화 완료!');\n    } catch (error) {\n      console.error('지도 초기화 중 오류 발생:', error);\n    }\n  }, [mapLoaded]); // mapLoaded 상태가 변경될 때만 실행\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page\",\n    children: [!mapLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-message\",\n      style: {\n        textAlign: 'center',\n        padding: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uB124\\uC774\\uBC84 \\uC9C0\\uB3C4 API\\uB97C \\uB85C\\uB529\\uC911\\uC785\\uB2C8\\uB2E4...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search-input\",\n          placeholder: \"\\uC7A5\\uC18C\\uB97C \\uAC80\\uC0C9\\uD558\\uC138\\uC694\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value),\n          onKeyPress: handleSearchKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"search-button\",\n          onClick: searchLocationByQuery,\n          children: \"\\uAC80\\uC0C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        style: {\n          width: '100%',\n          height: '500px',\n          border: '1px solid #ddd'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 7\n    }, this), showInput && markerInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"marker-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uC120\\uD0DD\\uD55C \\uC704\\uCE58 \\uC815\\uBCF4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"address\",\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uC8FC\\uC18C:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"address-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"address\",\n            value: customAddress,\n            onChange: e => setCustomAddress(e.target.value),\n            onKeyPress: handleAddressKeyPress,\n            placeholder: \"\\uC8FC\\uC18C\\uB97C \\uC785\\uB825\\uD558\\uACE0 Enter \\uD0A4\\uB098 \\uAC80\\uC0C9 \\uBC84\\uD2BC \\uD074\\uB9AD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"search-address-btn\",\n            onClick: searchAddressAndUpdateMarker,\n            title: \"\\uC8FC\\uC18C\\uB85C \\uAC80\\uC0C9\",\n            children: \"\\uD83D\\uDD0D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uC704\\uB3C4:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 14\n        }, this), \" \", markerInfo.lat.toFixed(6), \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uACBD\\uB3C4:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 64\n        }, this), \" \", markerInfo.lng.toFixed(6)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-preview-container\",\n          onClick: triggerFileInput,\n          children: imagePreview ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imagePreview,\n            alt: \"\\uC7A5\\uC18C \\uC774\\uBBF8\\uC9C0 \\uBBF8\\uB9AC\\uBCF4\\uAE30\",\n            className: \"image-preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-placeholder\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2795\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uC0AC\\uC9C4 \\uCD94\\uAC00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: handleImageUpload,\n          ref: fileInputRef,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"placeName\",\n            children: \"\\uC7A5\\uC18C \\uC774\\uB984:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"placeName\",\n            value: placeName,\n            onChange: e => setPlaceName(e.target.value),\n            placeholder: \"\\uC7A5\\uC18C \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"placeDescription\",\n            children: \"\\uC7A5\\uC18C \\uC124\\uBA85:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"placeDescription\",\n            value: placeDescription,\n            onChange: e => setPlaceDescription(e.target.value),\n            placeholder: \"\\uC7A5\\uC18C\\uC5D0 \\uB300\\uD55C \\uC124\\uBA85\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n            rows: \"3\",\n            className: \"description-textarea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"placeType\",\n            children: \"\\uC7A5\\uC18C \\uC720\\uD615:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"placeType\",\n            value: placeType,\n            onChange: e => setPlaceType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Landmark\",\n              children: \"\\uB79C\\uB4DC\\uB9C8\\uD06C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 643,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Restaurant\",\n              children: \"\\uC2DD\\uB2F9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Cafe\",\n              children: \"\\uCE74\\uD398\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Shopping\",\n              children: \"\\uC1FC\\uD551\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Culture\",\n              children: \"\\uBB38\\uD654/\\uC608\\uC220\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Nature\",\n              children: \"\\uC790\\uC5F0/\\uACF5\\uC6D0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Entertainment\",\n              children: \"\\uC5D4\\uD130\\uD14C\\uC778\\uBA3C\\uD2B8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Accommodation\",\n              children: \"\\uC219\\uBC15\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"stayTime\",\n            children: \"\\uCCB4\\uB958 \\uC2DC\\uAC04:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"stayTime\",\n            value: stayTime,\n            onChange: e => setStayTime(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"0.5h\",\n              children: \"30\\uBD84\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"1h\",\n              children: \"1\\uC2DC\\uAC04\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"1.5h\",\n              children: \"1\\uC2DC\\uAC04 30\\uBD84\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"2h\",\n              children: \"2\\uC2DC\\uAC04\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"2\\u20133h\",\n              children: \"2-3\\uC2DC\\uAC04\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"3\\u20134h\",\n              children: \"3-4\\uC2DC\\uAC04\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"4h+\",\n              children: \"4\\uC2DC\\uAC04 \\uC774\\uC0C1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveMarkerToLocalStorage,\n        className: \"save-button\",\n        children: \"\\uC774 \\uC704\\uCE58 \\uC800\\uC7A5\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-guide\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"guide-text\",\n        children: \"\\uC704\\uCE58\\uB97C \\uC800\\uC7A5\\uD558\\uB824\\uBA74 \\uC9C0\\uB3C4\\uC5D0\\uC11C \\uC6D0\\uD558\\uB294 \\uC704\\uCE58\\uB97C \\uD074\\uB9AD\\uD558\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"guide-text\",\n        children: [\"\\uC800\\uC7A5\\uD55C \\uC704\\uCE58\\uB294 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Saved\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 43\n        }, this), \" \\uBA54\\uB274\\uC5D0\\uC11C \\uD655\\uC778\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 533,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"8lOczAKjy1jZXkl1rnNYS36YkIQ=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","useRef","defaultImage","jsxDEV","_jsxDEV","openInfoWindow","map","marker","lat","lng","address","place","getPlaceNameFromCoords","infoWindow","window","naver","maps","InfoWindow","content","toFixed","borderColor","borderWidth","anchorSize","Size","open","searchNaverPlace","query","response","fetch","encodeURIComponent","data","json","console","log","err","documents","length","nearest","getNearestPlace","place_name","error","items","sort","a","b","distance","showRouteBetweenPoints","startLat","startLng","endLat","endLng","routeData","fetchNaverRoute","drawRouteOnMap","currentRoutePolyline","pathData","_pathData$route","_pathData$route$traop","_pathData$route$traop2","route","traoptimal","path","rawPath","convertedPath","LatLng","Polyline","strokeColor","strokeWeight","start","goal","method","headers","body","JSON","stringify","then","res","catch","removeCurrentMarker","markerRef","current","setMap","createAndRegisterMarker","position","mapRef","Marker","updateMarkerInfo","setMarkerInfo","getAddress","roadAddress","jibunAddress","Map","_s","markerInfo","showInput","setShowInput","placeName","setPlaceName","placeDescription","setPlaceDescription","placeType","setPlaceType","stayTime","setStayTime","uploadedImage","setUploadedImage","imagePreview","setImagePreview","mapLoaded","setMapLoaded","customAddress","setCustomAddress","originalAddress","setOriginalAddress","searchQuery","setSearchQuery","fileInputRef","searchLocationByQuery","trim","alert","name","finalAddress","setCenter","searchAddressAndUpdateMarker","Service","geocode","status","Status","OK","v2","meta","totalCount","firstItem","addresses","y","x","fullAddress","handleImageUpload","e","file","target","files","size","type","match","reader","FileReader","onload","event","result","readAsDataURL","triggerFileInput","click","extractLocation","cityMatch","replace","handleAddressKeyPress","key","preventDefault","handleSearchKeyPress","saveMarkerToLocalStorage","location","id","Date","getTime","markerObj","description","img","stay","popular","savedDate","toISOString","favorite","markers","parse","localStorage","getItem","push","setItem","checkNaverMapsLoaded","setTimeout","mapElement","document","getElementById","defaultPosition","mapOptions","center","zoom","zoomControl","zoomControlOptions","Position","TOP_RIGHT","mapTypeId","MapTypeId","NORMAL","mapTypeControl","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","currentPosition","icon","anchor","Point","warn","Event","addListener","clickedPosition","coord","beforemarker","reverseGeocode","orders","OrderType","ADDR","ROAD_ADDR","join","markerData","beforeLat","getPosition","beforeLng","className","children","style","textAlign","padding","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","onKeyPress","onClick","width","height","border","htmlFor","title","src","alt","accept","ref","display","rows","_c","$RefreshReg$"],"sources":["C:/Users/rlatj/Desktop/webprogram_team/src/pages/Map.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './Map.css';\r\nimport defaultImage from '../assets/dafault-place.png'; // 새로 추가된 기본 이미지 사용\r\n\r\n// InfoWindow 생성 및 오픈을 담당하는 함수 (컴포넌트 내부에서 사용)\r\nasync function openInfoWindow({ map, marker, lat, lng, address }) {\r\n  const place = await getPlaceNameFromCoords(lat, lng);\r\n  const infoWindow = new window.naver.maps.InfoWindow({\r\n    content: `\r\n      <div style=\"padding: 10px; min-width: 200px;\">\r\n        <p>위도: ${lat.toFixed(6)}</p>\r\n        <p>경도: ${lng.toFixed(6)}</p>\r\n        <p>장소: ${(place || address)}</p>\r\n      </div>\r\n    `,\r\n    borderColor: '#ccc',\r\n    borderWidth: 1,\r\n    anchorSize: new window.naver.maps.Size(10, 10)\r\n  });\r\n  infoWindow.open(map, marker);\r\n}\r\n\r\nconst searchNaverPlace = async (query) => {\r\n  try {\r\n    const response = await fetch(`http://localhost:5001/api/search?query=${encodeURIComponent(query)}`);\r\n    const data = await response.json();\r\n    console.log(data); // 리턴받은 장소\r\n    return data;\r\n  } catch(err) {\r\n    return null;\r\n  }\r\n};\r\n\r\n// 클릭한 지역 장소명 검색\r\nconst getPlaceNameFromCoords = async (lat, lng) => {\r\n  try {\r\n    const response = await fetch(`http://localhost:5001/api/poi?lat=${lat}&lng=${lng}`);\r\n    const data = await response.json();\r\n    if (data.documents && data.documents.length > 0) {\r\n      const nearest = getNearestPlace(lat, lng, data.documents);\r\n      return nearest.place_name;\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (err) {\r\n    console.error('장소 이름 가져오기 실패:', err);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 가장 가까운 장소 뽑아내기\r\nconst getNearestPlace = (lat, lng, items) => {\r\n  if (!items || items.length === 0) return null;\r\n  return items.sort((a, b) => a.distance - b.distance)[0]; // 가장 가까운 1개\r\n};\r\n\r\nasync function showRouteBetweenPoints({ startLat, startLng, endLat, endLng, map }) {\r\n  const routeData = await fetchNaverRoute(startLat, startLng, endLat, endLng);\r\n  if (routeData) {\r\n    drawRouteOnMap(map, routeData);\r\n  }\r\n}\r\n\r\nlet currentRoutePolyline = null;\r\n\r\nfunction drawRouteOnMap(map, pathData) {\r\n  if (!pathData?.route?.traoptimal?.[0]?.path) {\r\n    console.log('경로 데이터가 올바르지 않습니다.');\r\n    return;\r\n  }\r\n\r\n  const rawPath = pathData.route.traoptimal[0].path;\r\n  const convertedPath = rawPath.map(([lng, lat]) => new window.naver.maps.LatLng(lat, lng));\r\n\r\n  currentRoutePolyline = new window.naver.maps.Polyline({\r\n    map: map,\r\n    path: convertedPath,\r\n    strokeColor: '#007BFF',\r\n    strokeWeight: 5\r\n  });\r\n}\r\n\r\nasync function fetchNaverRoute(startLat, startLng, endLat, endLng) {\r\n  const start = `${startLng},${startLat}`;  // 경로는 \"lng,lat\" 순서\r\n  const goal = `${endLng},${endLat}`;\r\n\r\n  try {\r\n    // const response = await fetch(`http://localhost:5001/api/route/drive?start=${start}&goal=${goal}`); // 자동차\r\n    // const response = await fetch(`http://localhost:5001/api/route/pedestrian?start=${start}&goal=${goal}`); // 도보\r\n    const response = await fetch('http://localhost:5001/api/route/pedestrian', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ start, goal })\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => console.log(data))\r\n    .catch(err => console.error(err));\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (err) {\r\n    console.error('경로 API 호출 실패:', err);\r\n    return null;\r\n  }\r\n}\r\n\r\n// 중복 제거: 기존 마커 제거\r\nfunction removeCurrentMarker(markerRef) {\r\n  if (markerRef.current) {\r\n    markerRef.current.setMap(null);\r\n  }\r\n}\r\n\r\n// 중복 제거: 새 마커 생성 및 등록\r\nfunction createAndRegisterMarker(position, mapRef, markerRef) {\r\n  const marker = new window.naver.maps.Marker({\r\n    position,\r\n    map: mapRef.current\r\n  });\r\n  markerRef.current = marker;\r\n  return marker;\r\n}\r\n\r\n// 중복 제거: 마커 정보 상태 업데이트\r\nfunction updateMarkerInfo(setMarkerInfo, lat, lng, address) {\r\n  setMarkerInfo({ lat, lng, address });\r\n}\r\n\r\nfunction getAddress(address) {\r\n  return address.roadAddress || address.jibunAddress;\r\n}\r\n\r\nfunction Map() {\r\n  // 상태 관리\r\n  const [markerInfo, setMarkerInfo] = useState(null);\r\n  const [showInput, setShowInput] = useState(false);\r\n  const [placeName, setPlaceName] = useState('');\r\n  const [placeDescription, setPlaceDescription] = useState(''); // 장소 설명 추가\r\n  const [placeType, setPlaceType] = useState('Landmark'); // 장소 유형\r\n  const [stayTime, setStayTime] = useState('1h'); // 체류 시간\r\n  const [uploadedImage, setUploadedImage] = useState(null); // 업로드된 이미지\r\n  const [imagePreview, setImagePreview] = useState(''); // 이미지 미리보기 URL\r\n  const [mapLoaded, setMapLoaded] = useState(false);\r\n  const [customAddress, setCustomAddress] = useState(''); // 사용자가 직접 입력한 주소\r\n  const [originalAddress, setOriginalAddress] = useState(''); // 네이버 API에서 받아온 원본 주소\r\n  const [searchQuery, setSearchQuery] = useState(''); // 장소 검색어 추가\r\n  const mapRef = useRef(null);\r\n  const markerRef = useRef(null);\r\n  const fileInputRef = useRef(null);\r\n\r\n  // 장소명으로 검색\r\n  const searchLocationByQuery = async () => {\r\n    if (!searchQuery.trim() || !mapRef.current) return;\r\n\r\n    try {\r\n      // 장소 검색\r\n      const data = await searchNaverPlace(searchQuery.trim());\r\n\r\n      if (!data || data.length === 0) {\r\n        alert('검색 결과가 없습니다.');\r\n        return;\r\n      }\r\n      console.log(data[0]);\r\n\r\n      const place = data[0];\r\n      const lat = place.lat\r\n      const lng = place.lng\r\n      const position = new window.naver.maps.LatLng(lat, lng);\r\n\r\n      setPlaceName(place.name);\r\n\r\n      const finalAddress = place.address\r\n      setCustomAddress(finalAddress);\r\n      setOriginalAddress(finalAddress);\r\n\r\n      // 지도 이동\r\n      mapRef.current.setCenter(position);\r\n\r\n      // 기존 마커 제거\r\n      removeCurrentMarker(markerRef);\r\n\r\n      // 새 마커 생성 및 등록\r\n      const marker = createAndRegisterMarker(position, mapRef, markerRef);\r\n\r\n      // 정보창 표시\r\n      await openInfoWindow({\r\n        map: mapRef.current,\r\n        marker,\r\n        lat: lat,\r\n        lng: lng,\r\n        address: searchQuery.trim()\r\n      });\r\n\r\n      // 마커 정보 업데이트\r\n      updateMarkerInfo(setMarkerInfo, lat, lng, searchQuery.trim());\r\n      setShowInput(true);\r\n    } catch (error) {\r\n      console.error('장소 검색 실패:', error);\r\n      alert('장소 검색 중 문제가 발생했습니다.');\r\n    }\r\n  };\r\n\r\n  // 주소로 마커 위치 업데이트\r\n  const searchAddressAndUpdateMarker = () => {\r\n    if (!customAddress.trim() || !mapRef.current) return;\r\n\r\n    // 지오코딩 서비스를 사용하여 주소를 좌표로 변환\r\n    window.naver.maps.Service.geocode({\r\n      query: customAddress\r\n    }, async (status, response) => {\r\n      if (status !== window.naver.maps.Service.Status.OK) {\r\n        alert('입력하신 주소를 찾을 수 없습니다. 다른 주소를 입력해주세요.');\r\n        return;\r\n      }\r\n\r\n      // 검색 결과가 없는 경우\r\n      if (response.v2.meta.totalCount === 0) {\r\n        alert('검색 결과가 없습니다. 다른 주소를 입력해주세요.');\r\n        return;\r\n      }\r\n\r\n      // 처음 검색된 주소 정보 가져오기\r\n      const firstItem = response.v2.addresses[0];\r\n      const position = new window.naver.maps.LatLng(firstItem.y, firstItem.x);\r\n      \r\n      // 지도 이동\r\n      mapRef.current.setCenter(position);\r\n      \r\n      // 기존 마커 제거 (함수로 분리)\r\n      removeCurrentMarker(markerRef);\r\n\r\n      // 새 마커 생성 및 등록 (함수로 분리)\r\n      const marker = createAndRegisterMarker(position, mapRef, markerRef);\r\n\r\n      const fullAddress = getAddress(firstItem)\r\n\r\n      // 정보창 표시 (함수로 분리)\r\n      await openInfoWindow({\r\n        map: mapRef.current,\r\n        marker,\r\n        lat: position.lat(),\r\n        lng: position.lng(),\r\n        address: fullAddress\r\n      });\r\n\r\n      // 마커 정보 상태 업데이트 (함수로 분리)\r\n      updateMarkerInfo(setMarkerInfo, position.lat(), position.lng(), fullAddress);\r\n      \r\n      // 이미 주소가 입력되어 있으니 customAddress는 업데이트하지 않음\r\n    });\r\n  };\r\n\r\n  // 주소 입력 후 일정 시간이 지나면 자동으로 검색하는 기능 (선택적)\r\n  // 현재는 사용자가 검색 버튼을 클릭하거나 Enter 키를 누르는 경우에만 검색되도록 설정\r\n\r\n  // 이미지 선택 핸들러\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      // 파일 크기 검사 (최대 5MB로 제한)\r\n      if (file.size > 5 * 1024 * 1024) {\r\n        alert('이미지 크기는 5MB 이하여야 합니다.');\r\n        return;\r\n      }\r\n\r\n      // 파일 타입 검사\r\n      if (!file.type.match('image.*')) {\r\n        alert('이미지 파일만 업로드 가능합니다.');\r\n        return;\r\n      }\r\n\r\n      // 이미지를 Base64로 인코딩\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        setUploadedImage(event.target.result); // Base64 문자열 저장\r\n        setImagePreview(event.target.result); // 미리보기용 URL 설정\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  // 이미지 업로드 버튼 클릭 핸들러\r\n  const triggerFileInput = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  // 주소에서 지역 추출 (예: \"서울특별시 광진구...\" -> \"서울\")\r\n  const extractLocation = (address) => {\r\n    if (!address) return '';\r\n    \r\n    // 시/도 추출 (서울특별시, 경기도 등)\r\n    const cityMatch = address.match(/([^\\s]+시|[^\\s]+도|[^\\s]+군|[^\\s]+구)/);\r\n    if (cityMatch) {\r\n      // \"특별시\", \"광역시\" 등의 접미사 제거\r\n      return cityMatch[0].replace(/특별시|광역시|자치시/, '').trim();\r\n    }\r\n    return '';\r\n  };\r\n  \r\n  // 주소 입력 필드에서 Enter 키 입력 시 주소 검색 실행\r\n  const handleAddressKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      searchAddressAndUpdateMarker();\r\n    }\r\n  };\r\n  \r\n  // 장소명 검색 필드에서 Enter 키 입력 시 장소 검색 실행\r\n  const handleSearchKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      searchLocationByQuery();\r\n    }\r\n  };\r\n\r\n  // 장소를 localStorage에 저장\r\n  const saveMarkerToLocalStorage = () => {\r\n    if (!markerInfo) return;\r\n    \r\n    // 필수 입력 확인\r\n    const name = placeName.trim();\r\n    if (!name) {\r\n      alert('장소 이름을 입력해주세요.');\r\n      return;\r\n    }\r\n    \r\n    // 네이버 API에서 받아온 원본 주소를 우선적으로 사용\r\n    // 원본 주소가 없는 경우에만 사용자가 입력한 주소 사용\r\n    const finalAddress = originalAddress.trim() || markerInfo.address;\r\n    \r\n    // 장소 위치 (시/도) 추출\r\n    const location = extractLocation(finalAddress);\r\n    \r\n    // 현재 시간을 ID로 사용\r\n    const id = new Date().getTime();\r\n    \r\n    const markerObj = {\r\n      id: id,\r\n      name: name,\r\n      description: placeDescription, // 장소 설명 추가\r\n      address: finalAddress,\r\n      lat: markerInfo.lat,\r\n      lng: markerInfo.lng,\r\n      img: uploadedImage || defaultImage, // 업로드된 이미지 또는 기본 이미지\r\n      location: location, // 추출한 위치 (서울, 부산 등)\r\n      type: placeType, // 장소 유형\r\n      stay: stayTime, // 체류 시간\r\n      popular: false, // 기본값으로 인기 장소 아님\r\n      savedDate: new Date().toISOString(), // 저장 날짜\r\n      favorite: false,\r\n    };\r\n\r\n    // localStorage에 기존 데이터 불러오기\r\n    let markers = JSON.parse(localStorage.getItem(\"markers\")) || [];\r\n    markers.push(markerObj);\r\n\r\n    // localStorage에 저장\r\n    localStorage.setItem(\"markers\", JSON.stringify(markers));\r\n\r\n    // 저장 완료 알림 및 상태 초기화\r\n    alert('위치가 저장되었습니다! Saved 메뉴에서 확인하세요.');\r\n    setPlaceName('');\r\n    setPlaceDescription('');\r\n    setPlaceType('Landmark');\r\n    setStayTime('1h');\r\n    setUploadedImage(null);\r\n    setImagePreview('');\r\n    setSearchQuery('');\r\n    setCustomAddress('');\r\n    setOriginalAddress('');\r\n    setShowInput(false);\r\n  };\r\n\r\n  // 마운트 후 네이버 지도 API 확인\r\n  useEffect(() => {\r\n    const checkNaverMapsLoaded = () => {\r\n      // window.naver 객체가 존재하는지 먼저 확인\r\n      if (window.naver && window.naver.maps) {\r\n        console.log('네이버 지도 API가 성공적으로 로드되었습니다!');\r\n        setMapLoaded(true); // 지도 API 로드 완료 표시\r\n      } else {\r\n        console.error('네이버 지도 API를 찾을 수 없습니다. window.naver:', window.naver);\r\n        // 0.5초 후 다시 시도\r\n        setTimeout(checkNaverMapsLoaded, 500);\r\n      }\r\n    };\r\n    \r\n    // 초기 시도\r\n    checkNaverMapsLoaded();\r\n    \r\n    // 컴포넌트 언마운트 시 정리\r\n    return () => {\r\n      if (markerRef.current) {\r\n        markerRef.current.setMap(null);\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  // 네이버 지도 초기화\r\n  useEffect(() => {\r\n    // 지도 API가 로드되지 않은 경우 종료\r\n    if (!mapLoaded) return;\r\n    \r\n    console.log('지도 초기화 시작...');\r\n    \r\n    try {\r\n      // 1. 지도 요소 가져오기\r\n      const mapElement = document.getElementById('map');\r\n      if (!mapElement) {\r\n        console.error('지도를 표시할 DOM 요소를 찾을 수 없습니다.');\r\n        return;\r\n      }\r\n      \r\n      // 2. 기본 위치 설정 (세종대)\r\n      const defaultPosition = new window.naver.maps.LatLng(37.549186395087, 127.07505567644);\r\n      \r\n      // 3. 지도 옵션 설정\r\n      const mapOptions = {\r\n        center: defaultPosition,\r\n        zoom: 17,\r\n        zoomControl: true,\r\n        zoomControlOptions: {\r\n          position: window.naver.maps.Position.TOP_RIGHT\r\n        },\r\n        mapTypeId: window.naver.maps.MapTypeId.NORMAL,\r\n        mapTypeControl: true,\r\n      };\r\n      \r\n      // 4. 지도 객체 생성\r\n      console.log('지도 객체 생성 중...');\r\n      const map = new window.naver.maps.Map(mapElement, mapOptions);\r\n      mapRef.current = map;\r\n      console.log('지도 객체 생성 완료!');\r\n      \r\n      // 5. 현재 위치 가져오기\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          const { latitude, longitude } = position.coords;\r\n          const currentPosition = new window.naver.maps.LatLng(latitude, longitude);\r\n          \r\n          // 현재 위치로 지도 이동\r\n          map.setCenter(currentPosition);\r\n          \r\n          // 현재 위치에 마커 표시\r\n          new window.naver.maps.Marker({\r\n            position: currentPosition,\r\n            map: map,\r\n            icon: {\r\n              content: '<div style=\"width: 16px; height: 16px; background-color: blue; border-radius: 50%; border: 2px solid white;\"></div>',\r\n              anchor: new window.naver.maps.Point(8, 8)\r\n            }\r\n          });\r\n          \r\n          console.log('현재 위치로 지도 이동:', latitude, longitude);\r\n        }, error => {\r\n          console.warn('현재 위치를 가져올 수 없습니다:', error);\r\n        });\r\n      }\r\n      \r\n      // 6. 지도 클릭 이벤트 리스너 등록\r\n      window.naver.maps.Event.addListener(map, 'click', function(e) {\r\n        // 클릭한 위치 좌표\r\n        const clickedPosition = e.coord;\r\n        \r\n        const beforemarker = markerRef.current;\r\n        \r\n        // 기존 마커 제거\r\n        removeCurrentMarker(markerRef)\r\n        \r\n        // 새 마커 생성\r\n        // const marker = createAndRegisterMarker(clickedPosition, map, markerRef)\r\n        const marker = new window.naver.maps.Marker({\r\n          position: clickedPosition,\r\n          map: map\r\n        });\r\n        markerRef.current = marker;\r\n        \r\n        // 클릭 위치의 주소 정보 가져오기 (Reverse Geocoding)\r\n        window.naver.maps.Service.reverseGeocode({\r\n          coords: clickedPosition,\r\n          orders: [window.naver.maps.Service.OrderType.ADDR, window.naver.maps.Service.OrderType.ROAD_ADDR].join(',')\r\n        }, async function(status, response) {\r\n          if (status !== window.naver.maps.Service.Status.OK) {\r\n            console.error('주소 정보를 가져오는데 실패했습니다');\r\n            return;\r\n          }\r\n          \r\n          // 주소 정보 추출\r\n          const address = getAddress(response.v2.address);\r\n          \r\n          // 정보창 표시 (함수로 분리)\r\n          await openInfoWindow({\r\n            map,\r\n            marker,\r\n            lat: clickedPosition.lat(),\r\n            lng: clickedPosition.lng(),\r\n            address\r\n          });\r\n          \r\n          // 마커 정보 업데이트\r\n          const markerData = {\r\n            lat: clickedPosition.lat(),\r\n            lng: clickedPosition.lng(),\r\n            address: address\r\n          };\r\n          \r\n          if(beforemarker != null) {\r\n            const beforeLat = beforemarker.getPosition().lat();\r\n            const beforeLng = beforemarker.getPosition().lng();\r\n            \r\n            if(currentRoutePolyline) currentRoutePolyline.setMap(null);\r\n            showRouteBetweenPoints({\r\n              startLat: beforeLat,\r\n              startLng: beforeLng,\r\n              endLat: clickedPosition.lat(),\r\n              endLng: clickedPosition.lng(),\r\n              map: map\r\n            });\r\n          }\r\n          \r\n          setMarkerInfo(markerData);\r\n          setCustomAddress(address); // 초기 주소를 사용자 입력용 상태에 설정\r\n          setShowInput(true);\r\n        });\r\n      });\r\n      \r\n      console.log('지도 초기화 완료!');\r\n    } catch (error) {\r\n      console.error('지도 초기화 중 오류 발생:', error);\r\n    }\r\n  }, [mapLoaded]); // mapLoaded 상태가 변경될 때만 실행\r\n\r\n  return (\r\n    <div className=\"map-page\">\r\n      {!mapLoaded && (\r\n        <div className=\"loading-message\" style={{ textAlign: 'center', padding: '20px' }}>\r\n          <p>네이버 지도 API를 로딩중입니다...</p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* 장소명 검색 박스 */}\r\n      <div className=\"search-container\">\r\n        <div className=\"search-box\">\r\n          <input \r\n            type=\"text\" \r\n            className=\"search-input\" \r\n            placeholder=\"장소를 검색하세요\" \r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            onKeyPress={handleSearchKeyPress}\r\n          />\r\n          <button \r\n            className=\"search-button\" \r\n            onClick={searchLocationByQuery}\r\n          >\r\n            검색\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"map-container\">\r\n        <div id=\"map\" style={{ width: '100%', height: '500px', border: '1px solid #ddd' }}></div>\r\n      </div>\r\n      \r\n      {showInput && markerInfo && (\r\n        <div className=\"marker-info\">\r\n          <h3>선택한 위치 정보</h3>\r\n          <div className=\"input-group\">\r\n            <label htmlFor=\"address\"><strong>주소:</strong></label>\r\n            <div className=\"address-input-container\">\r\n              <input \r\n                type=\"text\" \r\n                id=\"address\" \r\n                value={customAddress} \r\n                onChange={(e) => setCustomAddress(e.target.value)}\r\n                onKeyPress={handleAddressKeyPress}\r\n                placeholder=\"주소를 입력하고 Enter 키나 검색 버튼 클릭\"\r\n              />\r\n              <button \r\n                type=\"button\" \r\n                className=\"search-address-btn\"\r\n                onClick={searchAddressAndUpdateMarker}\r\n                title=\"주소로 검색\"\r\n              >\r\n                🔍\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <p><strong>위도:</strong> {markerInfo.lat.toFixed(6)}, <strong>경도:</strong> {markerInfo.lng.toFixed(6)}</p>\r\n          \r\n          {/* 이미지 업로드 섹션 */}\r\n          <div className=\"image-upload-section\">\r\n            <div className=\"image-preview-container\" onClick={triggerFileInput}>\r\n              {imagePreview ? (\r\n                <img src={imagePreview} alt=\"장소 이미지 미리보기\" className=\"image-preview\" />\r\n              ) : (\r\n                <div className=\"upload-placeholder\">\r\n                  <span>➕</span>\r\n                  <p>사진 추가</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <input \r\n              type=\"file\" \r\n              accept=\"image/*\" \r\n              onChange={handleImageUpload} \r\n              ref={fileInputRef} \r\n              style={{ display: 'none' }} \r\n            />\r\n          </div>\r\n          \r\n          {/* 장소 정보 입력 폼 */}\r\n          <div className=\"form-container\">\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"placeName\">장소 이름:</label>\r\n              <input \r\n                type=\"text\" \r\n                id=\"placeName\" \r\n                value={placeName} \r\n                onChange={(e) => setPlaceName(e.target.value)} \r\n                placeholder=\"장소 이름을 입력하세요\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"placeDescription\">장소 설명:</label>\r\n              <textarea\r\n                id=\"placeDescription\"\r\n                value={placeDescription}\r\n                onChange={(e) => setPlaceDescription(e.target.value)}\r\n                placeholder=\"장소에 대한 설명을 입력하세요\"\r\n                rows=\"3\"\r\n                className=\"description-textarea\"\r\n              ></textarea>\r\n            </div>\r\n            \r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"placeType\">장소 유형:</label>\r\n              <select \r\n                id=\"placeType\" \r\n                value={placeType}\r\n                onChange={(e) => setPlaceType(e.target.value)}\r\n              >\r\n                <option value=\"Landmark\">랜드마크</option>\r\n                <option value=\"Restaurant\">식당</option>\r\n                <option value=\"Cafe\">카페</option>\r\n                <option value=\"Shopping\">쇼핑</option>\r\n                <option value=\"Culture\">문화/예술</option>\r\n                <option value=\"Nature\">자연/공원</option>\r\n                <option value=\"Entertainment\">엔터테인먼트</option>\r\n                <option value=\"Accommodation\">숙박</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"stayTime\">체류 시간:</label>\r\n              <select \r\n                id=\"stayTime\" \r\n                value={stayTime}\r\n                onChange={(e) => setStayTime(e.target.value)}\r\n              >\r\n                <option value=\"0.5h\">30분</option>\r\n                <option value=\"1h\">1시간</option>\r\n                <option value=\"1.5h\">1시간 30분</option>\r\n                <option value=\"2h\">2시간</option>\r\n                <option value=\"2–3h\">2-3시간</option>\r\n                <option value=\"3–4h\">3-4시간</option>\r\n                <option value=\"4h+\">4시간 이상</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          \r\n          <button onClick={saveMarkerToLocalStorage} className=\"save-button\">이 위치 저장하기</button>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"map-guide\">\r\n        <p className=\"guide-text\">위치를 저장하려면 지도에서 원하는 위치를 클릭하세요.</p>\r\n        <p className=\"guide-text\">저장한 위치는 <strong>Saved</strong> 메뉴에서 확인할 수 있습니다.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}