{"ast":null,"code":"/**\n * 네이버 맵 API 관련 유틸리티 함수들\n */\n\n// 네이버 지도 초기화 함수\nexport const initNaverMap = (elementId, options = {}) => {\n  // 네이버 맵 API가 로드되었는지 확인\n  if (!window.naver || !window.naver.maps) {\n    console.error('네이버 지도 API가 로드되지 않았습니다.');\n    return null;\n  }\n\n  // 기본 옵션과 사용자 옵션 병합\n  const defaultOptions = {\n    center: new window.naver.maps.LatLng(37.5665, 126.9780),\n    // 서울시청\n    zoom: 15,\n    zoomControl: true,\n    zoomControlOptions: {\n      position: window.naver.maps.Position.TOP_RIGHT\n    }\n  };\n  const mapOptions = {\n    ...defaultOptions,\n    ...options\n  };\n\n  // 지도 생성 및 반환\n  return new window.naver.maps.Map(elementId, mapOptions);\n};\n\n// 지도에 마커 추가 함수\nexport const addMarker = (map, position, options = {}) => {\n  if (!map || !window.naver || !window.naver.maps) return null;\n  return new window.naver.maps.Marker({\n    map,\n    position,\n    ...options\n  });\n};\n\n// 지도에 정보창 생성 함수\nexport const createInfoWindow = content => {\n  if (!window.naver || !window.naver.maps) return null;\n  return new window.naver.maps.InfoWindow({\n    content,\n    maxWidth: 300,\n    backgroundColor: \"#fff\",\n    borderColor: \"#ccc\",\n    borderWidth: 2,\n    anchorSize: new window.naver.maps.Size(10, 10),\n    anchorColor: \"#fff\",\n    pixelOffset: new window.naver.maps.Point(10, -10)\n  });\n};\n\n// 주소로 좌표 검색 (Geocoding)\nexport const geocodeAddress = async address => {\n  // 네이버 Geocoding API 사용 예시 (실제로는 API 키 필요)\n  // 실제 구현 시에는 네이버 클라우드 플랫폼에서 제공하는 API를 사용해야 합니다\n  console.log(`주소 \"${address}\"의, 지오코딩을 수행합니다`);\n\n  // 여기에 실제 Geocoding 코드 구현\n  // 예시 코드일 뿐 실제로는 네이버 API 호출 코드로 대체되어야 함\n  return {\n    lat: 37.5665,\n    lng: 126.9780\n  }; // 임시 응답\n};\n\n// 현재 위치 가져오기\nexport const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation is not supported by this browser.'));\n    }\n    navigator.geolocation.getCurrentPosition(position => {\n      resolve({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n    }, error => {\n      reject(error);\n    });\n  });\n};","map":{"version":3,"names":["initNaverMap","elementId","options","window","naver","maps","console","error","defaultOptions","center","LatLng","zoom","zoomControl","zoomControlOptions","position","Position","TOP_RIGHT","mapOptions","Map","addMarker","map","Marker","createInfoWindow","content","InfoWindow","maxWidth","backgroundColor","borderColor","borderWidth","anchorSize","Size","anchorColor","pixelOffset","Point","geocodeAddress","address","log","lat","lng","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","coords","latitude","longitude"],"sources":["/Users/luca/workspace/HtmlCssJs_Project/plan_web/src/services/navermap.js"],"sourcesContent":["/**\n * 네이버 맵 API 관련 유틸리티 함수들\n */\n\n// 네이버 지도 초기화 함수\nexport const initNaverMap = (elementId, options = {}) => {\n  // 네이버 맵 API가 로드되었는지 확인\n  if (!window.naver || !window.naver.maps) {\n    console.error('네이버 지도 API가 로드되지 않았습니다.');\n    return null;\n  }\n\n  // 기본 옵션과 사용자 옵션 병합\n  const defaultOptions = {\n    center: new window.naver.maps.LatLng(37.5665, 126.9780), // 서울시청\n    zoom: 15,\n    zoomControl: true,\n    zoomControlOptions: {\n      position: window.naver.maps.Position.TOP_RIGHT\n    }\n  };\n\n  const mapOptions = { ...defaultOptions, ...options };\n  \n  // 지도 생성 및 반환\n  return new window.naver.maps.Map(elementId, mapOptions);\n};\n\n// 지도에 마커 추가 함수\nexport const addMarker = (map, position, options = {}) => {\n  if (!map || !window.naver || !window.naver.maps) return null;\n\n  return new window.naver.maps.Marker({\n    map,\n    position,\n    ...options\n  });\n};\n\n// 지도에 정보창 생성 함수\nexport const createInfoWindow = (content) => {\n  if (!window.naver || !window.naver.maps) return null;\n\n  return new window.naver.maps.InfoWindow({\n    content,\n    maxWidth: 300,\n    backgroundColor: \"#fff\",\n    borderColor: \"#ccc\",\n    borderWidth: 2,\n    anchorSize: new window.naver.maps.Size(10, 10),\n    anchorColor: \"#fff\",\n    pixelOffset: new window.naver.maps.Point(10, -10)\n  });\n};\n\n// 주소로 좌표 검색 (Geocoding)\nexport const geocodeAddress = async (address) => {\n  // 네이버 Geocoding API 사용 예시 (실제로는 API 키 필요)\n  // 실제 구현 시에는 네이버 클라우드 플랫폼에서 제공하는 API를 사용해야 합니다\n  console.log(`주소 \"${address}\"의, 지오코딩을 수행합니다`);\n  \n  // 여기에 실제 Geocoding 코드 구현\n  // 예시 코드일 뿐 실제로는 네이버 API 호출 코드로 대체되어야 함\n  return { lat: 37.5665, lng: 126.9780 }; // 임시 응답\n};\n\n// 현재 위치 가져오기\nexport const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation is not supported by this browser.'));\n    }\n    \n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        resolve({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      },\n      (error) => {\n        reject(error);\n      }\n    );\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}